{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Odyssey B2B Backend\n\n## Overview\n\nOdyssey B2B is an enterprise-grade multi-tenant nutrition platform backend that provides vendor catalog management, customer health profiles, data ingestion capabilities, and health-aware product matching. The system is designed to handle 50 vendors with up to 500k products and 1M customers each, with strict HIPAA compliance requirements and performance SLOs of ≤500ms for matches API and ≤300ms for search operations.\n\nThe platform features a full-stack TypeScript implementation with a React frontend for administrative operations and a robust Express.js backend with PostgreSQL for data persistence. The architecture emphasizes tenant isolation, audit logging, and scalable data processing through queue-based ingestion workers.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client-side application is built with React and TypeScript, using Vite as the build tool. It implements a component-based architecture with shadcn/ui components for consistent design. The frontend features:\n\n- **Routing**: File-based routing using wouter for lightweight navigation\n- **State Management**: React Query (@tanstack/react-query) for server state management and caching\n- **UI Framework**: shadcn/ui components with Radix UI primitives and Tailwind CSS for styling\n- **Authentication**: Custom auth hooks that integrate with Appwrite for user authentication\n\nThe application follows a dashboard-centric design with dedicated pages for vendors, products, customers, ingestion jobs, and analytics monitoring.\n\n### Backend Architecture\nThe server implements a RESTful API using Express.js with TypeScript, structured around multi-tenant isolation:\n\n- **Database Layer**: Drizzle ORM with PostgreSQL, featuring tenant-scoped queries and partitioning strategy\n- **Authentication**: Appwrite JWT-based authentication with role-based access control (RBAC)\n- **Queue System**: PostgreSQL-backed job queue using `SELECT ... FOR UPDATE SKIP LOCKED` pattern\n- **Worker System**: Background job processors for CSV ingestion and data synchronization\n- **Error Handling**: RFC 9457 Problem Details for HTTP APIs standard implementation\n\nThe backend emphasizes data isolation through vendor_id scoping on all database operations and implements comprehensive audit logging for HIPAA compliance.\n\n### Data Storage Architecture\nThe database schema implements LIST partitioning by vendor_id with HASH sub-partitioning for scalability:\n\n- **Primary Tables**: Products, customers, and health profiles with full-text search capabilities\n- **Audit System**: Comprehensive logging of all data access and modifications\n- **Partitioning**: Vendor-based partitioning with hash sub-partitions for optimal performance\n- **Search**: PostgreSQL full-text search with GIN indexes and tsvector maintenance\n\n### Security and Compliance\nThe system implements HIPAA-compliant security measures:\n\n- **Authentication**: JWT-based authentication through Appwrite\n- **Authorization**: Role-based permissions with vendor isolation\n- **Audit Trails**: Complete audit logging for all health data access\n- **Data Encryption**: Supabase Vault for encrypted secrets storage\n- **Idempotency**: Request deduplication for safe retries\n\n## External Dependencies\n\n### Authentication and User Management\n- **Appwrite**: Primary authentication provider for JWT token validation and user management\n- **Appwrite Teams**: Tenant organization and role assignment\n\n### Database and Storage\n- **Supabase PostgreSQL**: Primary database with read replica support for heavy operations\n- **Supabase Storage**: File storage with TUS resumable upload support for large CSV files\n- **Supabase Vault**: Encrypted secrets and PII storage with audit capabilities\n\n### Development and Infrastructure\n- **Drizzle ORM**: Type-safe database operations with PostgreSQL dialect\n- **Neon Database**: Serverless PostgreSQL provider (@neondatabase/serverless)\n- **TUS Protocol**: Resumable file uploads for large dataset ingestion (@tus/s3-store)\n\n### Monitoring and Observability\n- **React Query**: Client-side data fetching and caching with real-time updates\n- **Real-time Metrics**: WebSocket-based performance monitoring for API latencies\n- **Health Checks**: Database connection monitoring and system status reporting\n\n### Third-party Integrations\n- **Webhook Delivery**: HMAC-SHA256 signed webhook delivery to vendor endpoints\n- **CSV Processing**: Streaming CSV parser for large file ingestion\n- **External API Sync**: Configurable API connectors for vendor data synchronization\n\nThe system is designed for horizontal scalability with read replicas, partitioned tables, and queue-based processing to handle enterprise-scale data volumes while maintaining strict performance and compliance requirements.","size_bytes":4853},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/B2B-Devin-compatible prompt-README_1755563684105.md":{"content":"\n# Odyssey B2B — Backend (MVP) · Devin Tasking (Zero‑Shot)\n\n## 0) Objective\nImplement a multi-tenant B2B nutrition backend with: vendor catalogs, customer + health profiles, ingestion (CSV + external API connectors), search, health-aware matching, RBAC/admin, and webhooks. Ship production-ready code, migrations, infra-as-code where applicable, tests, and runbooks.\n\n## 1) Constraints & Non‑Goals\n- **Region:** USA. **Regulatory:** HIPAA (Security/Privacy Rules; documentation/audit retention 6 years).\n- **Non-goals (MVP):** multi-currency pricing; semantic/KG search (keep adapter hooks).\n- **Error format:** Problem Details for HTTP APIs (RFC 9457).\n\n## 2) Target SLOs & Scale\n- `/matches` P95 ≤ **500 ms**; list/search P95 ≤ **300 ms**.\n- Ingest ≤ **2M rows / 5–10 GB** per job; end-to-end ≤ **45 min** using `COPY` on reasonable hardware.\n- Tenants: **50**. Per tenant: **500k products**, **1M customers**.\n- Availability: **99.9%/mo** API; one 30‑min monthly maintenance window.\n\n## 3) Tech Stack\n- **API Edge:** Next.js (App Router) Route Handlers.\n- **AuthN:** Appwrite JWT (Bearer). **AuthZ/RBAC:** DB roles (see §5).\n- **DB:** Supabase Postgres + **read replicas** for heavy reads/search (ack async lag).\n- **Storage:** Supabase Storage with **TUS** resumable uploads for large CSVs.\n- **Queue/Workers:** Postgres‑backed work queue using `SELECT … FOR UPDATE SKIP LOCKED`.\n- **Errors:** RFC 9457 Problem+JSON.\n- **Webhooks:** HMAC‑SHA256 signature + timestamp (Stripe‑style), at‑least‑once delivery.\n\n## 4) Repo Outputs\n1. **/apps/api** — Next.js API (Route Handlers).\n2. **/packages/db** — SQL migrations + seeders + typed client.\n3. **/packages/worker** — CSV/API ingest workers, webhook dispatcher, MV refresh.\n4. **/packages/lib** — shared: auth middleware, RFC9457 errors, idempotency store, HMAC sign/verify, header/value mapping, health derivations.\n5. **/infra** — environment examples, secrets contracts, storage buckets, read‑replica routing config.\n6. **/tests** — unit/integration/load (ingestion, matching, search, webhooks).\n7. **Runbooks** — ingest, queue, replicas, backup/restore, key rotation.\n\n## 5) Tenancy & RBAC\n- Single DB; strict tenant isolation: **every row has `vendor_id`**; all queries scoped by `vendor_id`.\n- Roles: `superadmin` (break‑glass only), `vendor_admin`, `vendor_operator`, `vendor_viewer`.\n- Health data: minimum‑necessary access; **audit** every read/write.\n\n## 6) Secrets & HIPAA Posture\n- Runtime secrets:\n  - Appwrite Functions → Appwrite env vars.\n  - Supabase Edge Functions → `supabase secrets`.\n- DB‑held secrets/PII: **Supabase Vault** (encrypted; SQL access; audited).\n- Storage: encrypted buckets; **TUS** uploads for large files.\n- Master keys: cloud KMS; envelope encryption; quarterly rotation (or on compromise).\n- Retention: **audit/docs 6 years**; raw API pages 30d; ingest error files 90d.\n- Webhooks: HMAC‑SHA256 signatures with timestamp headers; idempotent, at‑least‑once, retries + DLQ.\n\n## 7) Physical Database Design (Postgres 15/16+)\n- **Partitioning**\n  - Parent tables are **LIST partitioned by `vendor_id`**.\n  - Each vendor partition has **HASH sub‑partitions**: Products ×16; Customers ×32 — keeps indexes small, enables vendor pruning, avoids thousands of partitions.\n- **FTS**\n  - Trigger‑maintained `tsvector` (name, brand, short description) + **GIN** index.\n- **Arrays**\n  - Optional GIN indexes on `tags[]`, `allergens[]` only if used heavily.\n- **Replicas**\n  - Read replicas serve `/search` + analytics; surface replication‑lag freshness where relevant.\n\n## 8) Canonical Tables (required → optional)\n- **vendors** — id, name, status, settings_json, catalog_version, created_at, updated_at.\n- **users** (shadow of Appwrite) — id, email, display_name, created_at, updated_at.\n- **user_links** — id, user_id, vendor_id, role{superadmin|vendor_admin|vendor_operator|vendor_viewer}, status; UQ(user_id,vendor_id).\n- **platform_admins** — user_id (pk).\n- **products** (LIST→HASH×16):\n  - Required: id, vendor_id, external_id, name, brand, description, category_id, price, currency=USD, status, search_tsv, created_at, updated_at.\n  - Optional: barcode, gtin_type, ingredients, sub_category_id, cuisine_id, market_id, nutrition jsonb, serving_size, package_weight, dietary_tags[], allergens[], certifications[], regulatory_codes[], source_url, soft_deleted_at.\n  - Indexes: PK(id), UQ(vendor_id,external_id), UQ(vendor_id,barcode), GIN(search_tsv), optional GIN(dietary_tags), GIN(allergens).\n- **product_images** — id, product_id, url, alt, sort.\n- **product_sources** — id, product_id, source{csv|api}, source_ref, ingestion_job_id.\n- **customers** (LIST→HASH×32):\n  - Required: id, vendor_id, external_id, full_name, email, dob or age, gender, location, created_at, updated_at.\n  - Optional: phone, custom_tags[], search_tsv, created_by, updated_by.\n  - Indexes: UQ(vendor_id,external_id), optional GIN(search_tsv).\n- **customer_health_profiles** (1‑to‑1) — customer_id, height_cm, weight_kg, age, gender, activity_level, conditions[], diet_goals[], macro_targets jsonb, avoid_allergens[]; Derived: bmi, bmr, tdee_cached, derived_limits jsonb; updated_by, timestamps.\n- **customer_consents** — id, customer_id, consent_type, granted, version, timestamp.\n- **customer_whitelists / customer_blacklists** — id, customer_id, product_id, note, timestamps.\n- **tax_categories / tax_tags / tax_allergens / tax_cuisines / tax_certifications** — id, code, label, parent_id?, active, timestamps.\n- **synonyms_header** — id, canonical, synonyms[], transform_ops jsonb, confidence.\n- **synonyms_value** — id, domain{allergen|condition|unit|diet|gender|activity}, canonical, synonyms[].\n- **vendor_mappings** — id, vendor_id, mode{products|customers}, map jsonb, version, timestamps.\n- **ingestion_jobs** — id, vendor_id, mode{products|customers|api_sync}, status{queued|running|failed|completed|canceled}, progress_pct, totals jsonb, error_url, started_at, finished_at, attempt, params jsonb.\n- **ingestion_job_errors** — id, job_id, row_no, field, code, message, raw jsonb.\n- **stg_products / stg_customers** — staging superset; job_id, vendor_id; truncate post‑merge.\n- **stg_vendor_raw** — id, vendor_id, source, page_id, payload jsonb, fetched_at (TTL 30d).\n- **connectors** — id, vendor_id, source, base_url, auth_type, rate_limit_rpm, secrets_ref, enabled, timestamps.\n- **connector_cursors** — id, vendor_id, source, cursor, synced_at, status.\n- **matches_cache** — PK(vendor_id, customer_id, catalog_version), results jsonb, ttl_at.\n- **diet_rules** — id, vendor_id, condition_code, policy jsonb, active, version, timestamps.\n- **scoring_policies** — id, vendor_id, weights jsonb, active, timestamps.\n- **webhook_endpoints** — id, vendor_id, url, secret_ref, enabled, retries_max, tolerance_sec, timestamps.\n- **webhook_deliveries** — id, endpoint_id, event_type, payload jsonb, status, attempt, last_error, signature, created_at.\n- **idempotency_keys** — key(pk), vendor_id, method, path, request_hash, response_hash, status, created_at, expires_at(24h).\n- **audit_log** — id, actor_user_id, actor_role, vendor_id?, action, entity, entity_id, before jsonb, after jsonb, ip, ua, justification?, timestamp.\n\n## 9) API Contracts (v1)\n**Conventions**\n- Auth: Appwrite JWT (Bearer).\n- Tenancy: resolve `vendor_id` from JWT membership; do not pass vendor in URL.\n- Idempotency: require `Idempotency-Key` on POST/PUT/PATCH; store + replay.\n- Errors: `application/problem+json` (RFC 9457).\n- Pagination: cursor (`next_cursor`), `limit ≤ 200`. Rate limits: 60 rpm/user; 600 rpm/vendor; ingest 6 rpm/vendor.\n\n**Products**\n- `GET /api/v1/products` — filters: `q`, brand, category_id, `tags.any`, `allergens.none`, `updated_after`; sort `-updated_at|relevance`; cursor/limit.\n- `POST /api/v1/products` — idempotent batch upsert (≤10k).\n- `GET /api/v1/products/:id` · `PATCH /api/v1/products/:id` · `DELETE` (soft).\n\n**Customers & Health**\n- `GET/POST /api/v1/customers` (batch upsert).\n- `GET|PUT|PATCH|DELETE /api/v1/customers/:id`.\n- `GET /api/v1/customers/:id/health` (admin/operator).\n- `PUT /api/v1/customers/:id/health` — validate units; compute BMI, **BMR (Mifflin‑St Jeor)**, **TDEE**; update `derived_limits`.\n\n**Ingestion (CSV)**\n- `POST /api/v1/ingest/csv?mode=products|customers` → signed **TUS** URL + `job_id`.\n- `GET /api/v1/jobs/:id` → status/progress/error_url.\n- Worker: Storage (TUS) → **`COPY FROM`** to staging → validate/auto‑map (synonyms) → **MERGE/ON CONFLICT** into live partitions (100k–250k batches) → `ANALYZE`.\n\n**Connectors (External APIs)**\n- `PUT /api/v1/connectors/:source` (base_url, auth, rate, secrets_ref).\n- `POST /api/v1/connectors/:source/test`.\n- `POST /api/v1/connectors/:source/sync` → enqueue; `GET /api/v1/jobs/:id`.\n\n**Search**\n- `GET /api/v1/search/products?q=...` — FTS (`tsvector` + **GIN**), relevance/updated_at sort; cursor pagination.\n\n**Matching**\n- `GET /api/v1/matches/:customerId?k=20` — hard filters: allergens, explicit nutrient_limits; soft budgets from `derived_limits`; deterministic scoring; cache key `(vendor_id, customer_id, catalog_version)`.\n\n**Webhooks**\n- Events: `job.completed`, `job.failed`, `product.updated`, `customer.updated`.\n- Headers: `X-Timestamp`, `X-Signature: sha256=<hex>`, `X-Idempotency-Key`. Verify HMAC over `timestamp + \"\\n\" + rawBody` (reject skew beyond tolerance); exponential retries; DLQ.\n\n## 10) Health‑Aware Logic\n- **BMR**: Mifflin‑St Jeor; **TDEE = BMR × activity_factor** (sedentary≈1.2; light≈1.375; moderate≈1.55; very≈1.725; extra≈1.9). Store `tdee_cached`.\n- **Derived limits**: compute daily ceilings using vendor‑tunable condition templates (hypertension, T2D, CKD); vendors may promote soft nutrients to hard.\n- **Scoring**: candidate set (≤200 via FTS/filters); penalties when a serving consumes large shares of daily budgets; fiber bonus for diabetes; deterministic tie‑breaking.\n\n## 11) Ingestion Pipeline Details\n- **Uploads**: Supabase Storage **TUS** resumable uploads; support 5–10 GB files with resume/retry.\n- **Load**: stream server‑side to **`COPY FROM`** into `stg_*`, then `MERGE`/`ON CONFLICT` into live partitions; `ANALYZE` affected partitions.\n- **Mapping**: header auto‑map via `synonyms_header`; transform ops (unit conversions, ft′in″→cm, lb→kg, kJ→kcal); `synonyms_value` for allergens/conditions.\n- **Validation**: numeric ranges (height/weight/age), enums normalization, conflict checks (e.g., age vs DOB).\n- **Artifacts**: per‑row errors written to `ingestion_job_errors` + `errors.csv` in Storage.\n\n## 12) Queue & Workers\n- Postgres queue with `SELECT … FOR UPDATE SKIP LOCKED` to distribute work without duplication; shard by vendor; one active ingest per vendor; retries with exponential backoff; DLQ on exhaust.\n- Note: SKIP LOCKED is intentionally non‑blocking; ideal for job queues.\n\n## 13) Search\n- Persist `search_tsv` via trigger; **GIN** index. Keep document small (name/brand/short desc) to control index size.\n- Route `/search` to read replica where possible; include freshness indicator when replica lag suspected.\n\n## 14) Non‑Functional\n- Backups: daily full + PITR 7–30d.\n- Observability: structured logs (`req_id, user_id, vendor_id, role, route, status, latency_ms, rows_read/written`); metrics (RPS, p50/p95, error rate, queue lag, job throughput, replica lag).\n- Audit: RBAC changes; ALL health reads/writes; deletes; break‑glass sessions.\n\n## 15) Deliverables (Definition of Done)\n1. **DB migrations** implementing schema + partitioning (LIST by vendor; HASH sub‑parts), triggers (tsvector; timestamps), indexes.\n2. **API** implementing all routes in §9 with auth, RBAC, tenancy scoping, idempotency store, RFC9457 errors.\n3. **Workers**: CSV ingest (TUS→COPY→MERGE), API connector sync (paged, throttled, cursor checkpoints), webhook dispatcher.\n4. **Secrets** integration (Appwrite env vars, `supabase secrets`, Vault usage, KMS).\n5. **Read‑replica routing** for search + analytics; freshness indicator when lag suspected.\n6. **Tests**:\n   - Unit: mapping, health derivations, HMAC verification, idempotency.\n   - Integration: ingest 100k rows; API sync with fake pages; `/matches` correctness.\n   - Load: simulate 2M‑row ingest with synthetic data; verify duration within SLO; search QPS vs replica.\n7. **Runbooks**: ingest, queue, replica, backup/restore, secret rotation, webhook troubleshooting.\n8. **Sample data** + seeds: taxonomy, synonyms, condition templates.\n9. **CI**: lint, typecheck, tests, migration check, secret‑scan; on main, build workers.\n\n## 16) Fallbacks & Edge Cases\n- Missing health inputs → skip BMR/TDEE; compute base matching only; return `health_score_terms=0`.\n- TUS upload aborted → client resumes; server verifies checksum; partial files pruned.\n- `COPY` fails on bad rows → keep staging; collect row errors; continue batches; write `errors.csv`; job `completed_with_errors`.\n- Webhook consumer 4xx → retry once then park to DLQ with reason; 5xx → full retry policy; signature mismatch → mark `INVALID_SIGNATURE`.\n- Replica lag detected → serve from primary or add freshness header.\n\n## 17) Implementation Sequence (strict)\n1. DB migrations + seeds (taxonomy, synonyms, policies).\n2. Auth/RBAC middleware (JWT validate; role lookup; tenancy guard).\n3. Products & Customers CRUD (batch upsert + idempotency + RFC9457 errors).\n4. Storage + TUS upload init; CSV **COPY** ingest worker pipeline end‑to‑end.\n5. Connectors framework (paged fetch; cursors; throttling).\n6. Search (FTS + filters; cursor pagination).\n7. Health endpoints + derivations (Mifflin‑St Jeor + TDEE).\n8. Matching engine + cache invalidation (`catalog_version`).\n9. Webhooks (HMAC sign/verify; retries; DLQ).\n10. Read‑replica routing for search; freshness header.\n11. Observability + audit; load tests; runbooks; polish.\n\n## 18) Acceptance Tests (must pass)\n- CRUD: uniqueness, RBAC, idempotency replay.\n- Ingest: 2M‑row synthetic → completes ≤ 45 min; error CSV present; post‑ingest ANALYZE executed.\n- Search: relevance + filters; stable pagination; replica path exercised.\n- Matching: respects hard allergen blocks and explicit nutrient ceilings; uses soft budgets when no explicit limits.\n- Webhooks: signature verified; retries + DLQ; idempotency honored.\n- Security: health access audited; secrets never logged; break‑glass flows audited.\n\n---\n\n**Deliver this as the root README and implement accordingly.**\n","size_bytes":14607},"attached_assets/odyssey-b2b-prd-v1_1755563684104.md":{"content":"\n# PRD v1 — Odyssey B2B (Backend)\n\n## 0) Product frame\n- **Region:** USA\n- **Regulatory:** HIPAA (Security & Privacy Rules; documentation retention 6 years)\n- **Goal:** Multi-tenant B2B nutrition platform: vendor catalogs, customer+health profiles, ingestion (CSV/API), search, health-aware matching, admin/RBAC.\n- **Scale targets:** 50 vendors; per vendor up to **500k products**, **1M customers**; CSV ingest **5–10 GB / ≤ 2M rows/job** (resumable).\n- **SLOs:** `/matches` P95 ≤ 500 ms; list/search P95 ≤ 300 ms; ingest 2M rows ≤ 45 min (COPY pipeline).\n- **Environments:** dev, stage, prod (separate projects, DBs, storage buckets).\n\n---\n\n## 1) Architecture\n\n### 1.1 High-level\n- **API Edge:** Next.js Route Handlers (App Router).\n- **AuthN/Z:** Appwrite JWT on every call; RBAC (roles below). Appwrite Teams/Users for tenancy identity.\n- **Data:** Supabase Postgres (+ read replicas for heavy reads/search) and Supabase Storage (TUS resumable uploads).\n- **Queue/Workers:** Postgres-backed queue with `SELECT … FOR UPDATE SKIP LOCKED` for multi-consumer dispatch.\n- **Errors:** Problem Details for HTTP APIs (RFC 9457).\n- **Idempotency:** `Idempotency-Key` on POST/PUT/PATCH + server-side store.\n- **Webhooks:** HMAC-SHA256 signature + timestamp; at-least-once delivery + retries + DLQ.\n\n```mermaid\nflowchart LR\n  FE[Frontend] --> API[/API Edge/]\n  Appwrite[(Appwrite Auth)]\n  DB[(Supabase Postgres + Read Replicas)]\n  Storage[(Supabase Storage - TUS)]\n  Queue[[PG Queue]]\n  Workers[[Workers: CSV/API/Matching/MV]]\n  Webhooks[[Vendor endpoints]]\n\n  FE -- JWT --> API\n  API <--> Appwrite\n  API <--> DB\n  API <--> Storage\n  API <--> Queue\n  Queue --> Workers\n  Workers <--> DB\n  Workers <--> Storage\n  Workers --> Webhooks\n```\n\n---\n\n## 2) Tenancy, roles, security\n\n### 2.1 Tenancy\n- Single DB; strict tenant isolation: every row has `vendor_id`; all queries scoped by `vendor_id`.\n- Partitioning prunes by vendor (see §4).\n\n### 2.2 Roles\n- `superadmin` (platform, break-glass only), `vendor_admin`, `vendor_operator`, `vendor_viewer`.\n- Minimum necessary: health data requires elevated scope; all health reads/writes audited.\n\n### 2.3 HIPAA controls (MVP)\n- Safeguards: administrative/physical/technical per Security Rule.\n- Retention: documentation/audit artifacts **6 years**.\n- Encryption: in-transit (TLS) and at-rest (platform-provided).\n\n---\n\n## 3) Secrets & keys (platform-specific)\n- **Runtime secrets:**\n  - Appwrite Functions → Appwrite env vars.\n  - Supabase Edge Functions → `supabase secrets`.\n- **Database-held secrets/PII:** Supabase Vault (encrypted; SQL access; audited).\n- **Storage:** Supabase Storage TUS resumable uploads for large CSVs.\n- **Master keys:** managed cloud KMS; envelope encryption; rotation policy.\n- **Guardrails:** no secrets in code/logs/images; least-privilege IAM; audit secret reads; CI secret scanning; rotation runbooks.\n\n---\n\n## 4) Data model & physical design\n\n### 4.1 Partitioning & indexes (scale-ready)\n- **Partitioning:** parent tables are LIST partitioned by `vendor_id`; each vendor partition has HASH sub-partitions (Products ×16; Customers ×32). Enables vendor pruning; keeps indexes small; avoids thousands of partitions.\n- **FTS:** trigger-maintained `tsvector` (name, brand, short description) with GIN index.\n- **Arrays:** GIN on `tags[]`, `allergens[]` only if filter paths use them.\n- **Analyze:** run `ANALYZE` after heavy loads to refresh stats.\n- **Read replicas:** serve `/search` + analytics; replication lag acknowledged in UX.\n\n### 4.2 Tables (required fields first; optional afterward)\n\n**vendors**\n- `id (pk)`, `name`, `status`, `created_at`, `updated_at`, `settings_json`, `catalog_version`\n\n**users** *(identity in Appwrite; shadow link only)*\n- `id (pk)`, `email`, `display_name`, timestamps\n\n**user_links** *(tenant membership + RBAC)*\n- `id (pk)`, `user_id fk`, `vendor_id fk`, `role enum(superadmin|vendor_admin|vendor_operator|vendor_viewer)`, `status`, timestamps, **UQ(user_id,vendor_id)**\n\n**platform_admins** *(superadmin registry)*\n- `user_id (pk)`, audit fields\n\n**products** *(LIST by vendor → HASH×16)*\n- Required: `id (pk uuid)`, `vendor_id`, `external_id`, `name`, `brand`, `description`, `category_id`, `price`, `currency ('USD')`, `status enum(active|inactive)`, `search_tsv tsvector`, `created_at`, `updated_at`\n- Optional: `barcode`, `gtin_type`, `ingredients (text)`, `sub_category_id`, `cuisine_id`, `market_id`, `nutrition jsonb` (per-serving), `serving_size`, `package_weight`, `dietary_tags text[]`, `allergens text[]`, `certifications text[]`, `regulatory_codes text[]`, `source_url`, `soft_deleted_at`\n- Indexes: `PK(id)`, `UQ(vendor_id,external_id)`, `UQ(vendor_id,barcode)`, `GIN(search_tsv)`, optional `GIN(dietary_tags)`, `GIN(allergens)`\n\n**product_images**\n- `id (pk)`, `product_id fk`, `url`, `alt`, `order`, timestamps\n\n**product_sources** *(lineage)*\n- `id (pk)`, `product_id fk`, `source enum(csv|api)`, `source_ref`, `ingestion_job_id fk`, timestamps\n\n**customers** *(LIST by vendor → HASH×32)*\n- Required: `id (pk)`, `vendor_id`, `external_id`, `full_name`, `email`, `dob` or `age`, `gender`, `location`, timestamps\n- Optional: `phone`, `custom_tags text[]`, `search_tsv`, `created_by`, `updated_by`\n- Indexes: `UQ(vendor_id,external_id)`, optional `GIN(search_tsv)`\n\n**customer_health_profiles** *(1-to-1)*\n- Required: `customer_id (pk,fk)`, `height_cm`, `weight_kg`, `age`, `gender`, `activity_level enum(sedentary|light|moderate|very|extra)`, `conditions text[]`, `diet_goals text[]`, `macro_targets jsonb`, `avoid_allergens text[]`\n- Derived: `bmi`, `bmr`, `tdee_cached`, `derived_limits jsonb` (soft budgets by condition)\n- Audit: `created_at`, `updated_at`, `updated_by`\n\n**customer_consents**\n- `id (pk)`, `customer_id fk`, `consent_type`, `granted boolean`, `version`, `timestamp`\n\n**customer_whitelists / customer_blacklists**\n- `id (pk)`, `customer_id fk`, `product_id fk`, `note`, timestamps\n\n**tax_categories / tax_tags / tax_allergens / tax_cuisines / tax_certifications**\n- `id (pk)`, `code`, `label`, `parent_id?`, `active`, timestamps\n\n**synonyms_header** *(ingestion header auto-map)*\n- `id (pk)`, `canonical`, `synonyms text[]`, `transform_ops jsonb`, `confidence default 1.0`\n\n**synonyms_value** *(value normalization: allergens/conditions/units)*\n- `id (pk)`, `domain enum(allergen|condition|unit|diet|gender|activity)`, `canonical`, `synonyms text[]`\n\n**vendor_mappings** *(per-vendor override of header→field)*\n- `id (pk)`, `vendor_id`, `mode enum(products|customers)`, `map jsonb`, `version`, timestamps\n\n**ingestion_jobs**\n- `id (pk)`, `vendor_id`, `mode enum(products|customers|api_sync)`, `status enum(queued|running|failed|completed|canceled)`, `progress_pct`, `totals jsonb`, `error_url`, `started_at`, `finished_at`, `attempt`, `params jsonb`\n\n**ingestion_job_errors**\n- `id (pk)`, `job_id fk`, `row_no`, `field`, `code`, `message`, `raw jsonb`\n\n**stg_products / stg_customers** *(staging; thin indexes)*\n- Columns mirroring canonical superset; `job_id`, `vendor_id`, raw columns; purge after merge.\n\n**stg_vendor_raw** *(API pages)*\n- `id (pk)`, `vendor_id`, `source`, `page_id`, `payload jsonb`, `fetched_at`; TTL 30 days.\n\n**connectors** *(per-vendor API config)*\n- `id (pk)`, `vendor_id`, `source`, `base_url`, `auth_type`, `rate_limit_rpm`, `secrets_ref (vault)`, `enabled`, timestamps\n\n**connector_cursors**\n- `id (pk)`, `vendor_id`, `source`, `cursor`, `synced_at`, `status`\n\n**matches_cache**\n- `vendor_id`, `customer_id`, `catalog_version`, `results jsonb`, `ttl_at` → **PK(vendor_id, customer_id, catalog_version)**\n\n**diet_rules** *(JSON policies per condition; vendor-tunable)*\n- `id (pk)`, `vendor_id`, `condition_code`, `policy jsonb`, `active`, `version`, timestamps\n\n**scoring_policies**\n- `id (pk)`, `vendor_id`, `weights jsonb` (preference fit, budget fit, recency), `active`, timestamps\n\n**webhook_endpoints**\n- `id (pk)`, `vendor_id`, `url`, `secret_ref (vault)`, `enabled`, `description`, `retries_max`, `tolerance_sec`, timestamps\n\n**webhook_deliveries**\n- `id (pk)`, `endpoint_id fk`, `event_type`, `payload jsonb`, `status`, `attempt`, `last_error`, `signature`, `timestamp`\n\n**idempotency_keys**\n- `key (pk)`, `vendor_id`, `method`, `path`, `request_hash`, `response_hash`, `status`, `created_at`, `expires_at` (24h typical)\n\n**audit_log**\n- `id (pk)`, `actor_user_id`, `actor_role`, `vendor_id?`, `action`, `entity`, `entity_id`, `before jsonb`, `after jsonb`, `ip`, `ua`, `justification?`, `timestamp`\n\n---\n\n## 5) APIs (v1). Paths, auth, RBAC, contracts\n\n### 5.1 Conventions\n- Auth: Appwrite JWT (bearer).\n- Tenancy: `vendor_id` resolved from JWT/team membership; no vendor in URL.\n- Idempotency: `Idempotency-Key` header on POST/PUT/PATCH (store/replay).\n- Errors: `application/problem+json` (RFC 9457).\n- Pagination: cursor (`next_cursor`), `limit ≤ 200`.\n- Rate limits: 60 rpm/user; 600 rpm/vendor; ingest endpoints 6 rpm/vendor.\n\n### 5.2 Products\n- `GET /api/v1/products` — filters: `q`, `brand`, `category_id`, `tags.any`, `allergens.none`, `updated_after`, `sort (-updated_at|relevance)`, `cursor`, `limit`\n- `POST /api/v1/products` — batch upsert (≤10k per call); idempotent\n- `GET /api/v1/products/:id`\n- `PATCH /api/v1/products/:id`\n- `DELETE /api/v1/products/:id` (soft)\n\n### 5.3 Customers & Health\n- `GET /api/v1/customers` (search/filter)\n- `POST /api/v1/customers` — batch upsert\n- `GET|PUT|PATCH|DELETE /api/v1/customers/:id`\n- `GET /api/v1/customers/:id/health` *(admin/operator)*\n- `PUT /api/v1/customers/:id/health` — validate units, compute BMI, BMR (Mifflin-St Jeor), TDEE, update `derived_limits`\n\n### 5.4 Ingestion (CSV)\n- `POST /api/v1/ingest/csv?mode=products|customers` — returns signed TUS upload URL + `job_id`\n- `GET /api/v1/jobs/:id` — job status/progress/error_url\n\n**Worker flow:** Storage (TUS) → `COPY` to staging → validate/auto-map (synonyms) → `MERGE/ON CONFLICT` to live partitions in 100k–250k batches → `ANALYZE` → finalize job; emit webhook.\n\n### 5.5 Connectors (External APIs)\n- `PUT /api/v1/connectors/:source` — set `base_url`, auth, rate, secrets_ref\n- `POST /api/v1/connectors/:source/test`\n- `POST /api/v1/connectors/:source/sync` — enqueue sync job\n- `GET /api/v1/jobs/:id`\n\n### 5.6 Search\n- `GET /api/v1/search/products?q=...&filters...` — FTS (tsvector + GIN), filters, sort by relevance/updated_at.\n\n### 5.7 Matching\n- `GET /api/v1/matches/:customerId?k=20` — hard filters (allergens, explicit limits); soft budgets from `derived_limits`; deterministic scoring; cache on `(vendor_id, customer_id, catalog_version)`.\n\n### 5.8 Taxonomy\n- CRUD: categories, tags, allergens, cuisines, certifications; synonym management.\n\n### 5.9 Webhooks\n- Events: `job.completed`, `job.failed`, `product.updated`, `customer.updated`.\n- Headers: `X-Idempotency-Key`, signature headers (`timestamp`, `v1=<hmac>`). Verify HMAC-SHA256 over `timestamp + \"\\n\" + raw_body`; reject stale timestamps.\n\n---\n\n## 6) Workflows\n\n### 6.1 Login & RBAC resolve\n1. FE obtains Appwrite session → JWT.\n2. API verifies JWT; loads `user_links` → `{vendor_id, role}`; scopes request.\n\n### 6.2 CSV ingest (products/customers)\n```mermaid\nsequenceDiagram\n  participant FE\n  participant API\n  participant Storage\n  participant Queue\n  participant Worker\n  participant DB\n  FE->>API: POST /ingest/csv?mode=products\n  API-->>FE: TUS URL + job_id\n  FE->>Storage: Resumable upload (TUS)\n  API->>Queue: enqueue(job_id)\n  Worker->>Storage: stream file\n  Worker->>DB: COPY -> stg_products\n  Worker->>DB: validate/map -> MERGE to products\n  Worker->>DB: ANALYZE partitions\n  Worker->>DB: finalize job (+errors.csv)\n  Worker->>Webhook: job.completed\n```\n\n### 6.3 API connector sync\n- Rate-limited paged fetch → `stg_vendor_raw` → normalize/map → merge → checkpoint cursors; retries + backoff.\n\n### 6.4 Matching request (cache miss)\n- Load customer+health → prefilter (FTS/arrays) ≤200 → score with soft budgets → store `matches_cache` (15 min TTL) → respond.\n\n### 6.5 Webhook delivery & retry\n- Sign payload (HMAC-SHA256 + timestamp) → POST → on 2xx mark delivered; else exponential retries → DLQ.\n\n---\n\n## 7) Business logic (deterministic)\n\n### 7.1 Customer health derivations\n- **BMR:** Mifflin-St Jeor; **TDEE = BMR × activity_factor** (sedentary≈1.2, light≈1.375, moderate≈1.55, very≈1.725, extra≈1.9). Store `tdee_cached`.\n- **Derived limits:** compute daily ceilings from condition templates (defaults seeded; vendor-tunable).\n\n### 7.2 Matching & scoring\n- **Hard filters:** avoid allergens; respect explicit customer nutrient limits; vendor diet hard rules.\n- **Soft budgets:** from `derived_limits`; penalize servings that consume large fractions of daily budgets; bonus fiber for diabetes template.\n- **Tie-breakers:** recency, deterministic ID order. Stable outputs for same inputs.\n\n---\n\n## 8) Non-functional & ops\n\n### 8.1 Scaling posture\n- Postgres partitioning: LIST by vendor; HASH sub-partitions (Products ×16; Customers ×32). Use partition pruning and local indexes.\n- COPY bulk load; minimal indexes on staging; ANALYZE after merges.\n- Queue: multi-consumer with SKIP LOCKED; per-vendor concurrency caps.\n- Read replicas: route `/search` + analytics; handle lag in UX.\n\n### 8.2 Observability\n- **Logs:** `req_id, user_id, vendor_id, role, route, status, latency_ms, rows_read, rows_written`.\n- **Metrics:** RPS, p50/p95, error rates, queue depth/lag, job throughput, replica lag.\n- **Audit:** RBAC changes; health reads/writes; data deletes; break-glass sessions.\n\n### 8.3 Availability, DR, retention\n- **Uptime:** 99.9%/mo API.\n- **Backups:** daily full + PITR 7–30 days.\n- **Retention:** audit/required documentation 6 y; raw API pages 30 d; ingest error files 90 d.\n\n---\n\n## 9) Validation & error model\n- **Problem+JSON** (RFC 9457): `type`, `title`, `status`, `detail`, `instance`, optional `errors[]` for field issues.\n- **Per-row ingest errors** in `ingestion_job_errors` and downloadable `errors.csv`.\n\n---\n\n## 10) Acceptance criteria\n\n**Functionality**\n- Products/Customers CRUD and idempotent batch upserts; uniqueness enforced.\n- CSV ingest supports 5–10 GB / ≤2M rows; resumable uploads; job progress + errors.\n- Connectors sync with paging/rate-limits; checkpoints; retries; raw storage 30 d.\n- Matching returns K results with deterministic scoring; respects hard/soft rules; caches with `catalog_version`.\n- Search uses FTS (GIN) + filters + cursor pagination.\n\n**Performance**\n- Meets SLOs; COPY-based ingest finishes within target; ANALYZE run after merges.\n\n**Security**\n- JWT validated each call; role enforcement; minimum-necessary health access; full audit.\n- Webhooks signed and verified; secrets managed per §3.\n\n---\n\n## 11) Appendix A — Field catalogs (full)\n\n### 11.1 Products (all attributes)\n- **Identity:** `id uuid`, `vendor_id uuid`, `external_id text`, `barcode text?`, `gtin_type enum?`\n- **Core:** `name text`, `brand text`, `description text`, `category_id fk`, `sub_category_id fk?`, `cuisine_id fk?`, `market_id fk?`\n- **Nutrition:** `nutrition jsonb` (per-serving nutrients); `serving_size text?`, `package_weight text?`\n- **Commerce:** `price numeric(12,2)`, `currency char(3) default 'USD'`, `status enum`\n- **Tags & compliance:** `dietary_tags text[]?`, `allergens text[]?`, `certifications text[]?`, `regulatory_codes text[]?`\n- **Search:** `search_tsv tsvector`\n- **Lineage:** `source_url?`, `soft_deleted_at?`, timestamps\n\n### 11.2 Customers\n- **Identity:** `id uuid`, `vendor_id uuid`, `external_id text` (UQ per vendor)\n- **Profile:** `full_name`, `email`, `dob date?`, `age int?`, `gender enum(male|female|other|unspecified)`, `location jsonb`\n- **Misc:** `phone?`, `custom_tags text[]?`, `search_tsv?`, timestamps\n\n### 11.3 Health profile\n- **Inputs:** `height_cm numeric(5,2)`, `weight_kg numeric(6,2)`, `age int`, `gender`, `activity_level enum(sedentary|light|moderate|very|extra)`, `conditions text[]`, `diet_goals text[]`, `macro_targets jsonb`, `avoid_allergens text[]`\n- **Derived:** `bmi numeric(5,2)`, `bmr numeric(8,2)`, `tdee_cached numeric(8,2)`, `derived_limits jsonb`\n- **Audit:** `updated_by`, timestamps\n\n### 11.4 Ingestion & mapping\n- `vendor_mappings.map` sample: `{\"height\": {\"field\":\"height_cm\",\"ops\":[\"ftin_to_cm\"]}}`\n- `synonyms_header` and `synonyms_value` seed canonicalization dictionaries.\n\n### 11.5 Webhooks\n- **Events:** payload includes `vendor_id`, `event_id`, `occurred_at`, `data`.\n- **Signature:** compute `HMAC_SHA256(secret, timestamp + \"\\n\" + raw_body)`; headers `X-Timestamp`, `X-Signature`.\n\n---\n\n## 12) Appendix B — Operational runbooks\n\n**Bulk ingest (CSV)**\n1) Upload via TUS.\n2) Worker `COPY` → staging (fastest bulk path).\n3) Validate+map; `MERGE` or `INSERT … ON CONFLICT` in 100k–250k batches; `ANALYZE` partitions.\n4) Emit `errors.csv`; finalize job.\n\n**Queue**\n- Consumer loop: `SELECT … FOR UPDATE SKIP LOCKED` → process → finalize; retries with exponential backoff → DLQ.\n\n**Indexes**\n- Local per sub-partition; REINDEX CONCURRENTLY on hot partitions as needed.\n\n**Replicas**\n- Route `/search` + reports to read replicas; show freshness banner if recent writes not yet visible.\n","size_bytes":17184},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { requireAuth, hasPermission, requirePermission, requireRole } from \"./lib/auth\";\nimport { handleError, ValidationError, NotFoundError, AuthenticationError, AuthorizationError, ConflictError } from \"./lib/errors\";\nimport { handleIdempotency, storeIdempotencyResponse, withIdempotency } from \"./lib/idempotency\";\nimport { auditAction, auditHealthAccess, auditHealthMiddleware } from \"./lib/audit\";\nimport { calculateHealthMetrics, DEFAULT_CONDITION_RULES, scoreProductForHealth } from \"./lib/health\";\nimport { createResumableUpload } from \"./lib/supabase\";\nimport { queue } from \"./lib/queue\";\nimport { readDb } from \"./lib/database\";\nimport { queueProcessor } from \"./workers/queue-processor\";\nimport { insertProductSchema, insertCustomerSchema, insertCustomerHealthProfileSchema, insertIngestionJobSchema, insertWebhookEndpointSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Start queue processor\n  await queueProcessor.start();\n\n  // Middleware for authentication and vendor context\n  async function withAuth(req: any, res: any, next: any) {\n    try {\n      const context = await requireAuth(req);\n      req.auth = context;\n      next();\n    } catch (error) {\n      handleError(new AuthenticationError((error as Error).message), req, res);\n    }\n  }\n\n  // Route: GET /api/v1/health - Health check\n  app.get('/api/v1/health', async (req, res) => {\n    try {\n      res.json({\n        status: 'healthy',\n        timestamp: new Date().toISOString(),\n        version: process.env.npm_package_version || '1.0.0'\n      });\n    } catch (error) {\n      handleError(error, req, res);\n    }\n  });\n\n  // Route: GET /api/v1/metrics - System metrics\n  app.get('/api/v1/metrics', withAuth, async (req, res) => {\n    try {\n      const metrics = await storage.getSystemMetrics();\n      const dbHealth = await storage.getDatabaseHealth();\n      \n      res.json({\n        ...metrics,\n        database: dbHealth\n      });\n    } catch (error) {\n      handleError(error, req, res);\n    }\n  });\n\n  // Route: GET /api/v1/vendors - List vendors\n  app.get('/api/v1/vendors', withAuth, async (req, res) => {\n    try {\n      requireRole(req.auth, 'superadmin');\n      const vendors = await storage.getVendors();\n      \n      await auditAction(req.auth, 'list_vendors', 'vendors', undefined, undefined, undefined, req);\n      \n      res.json({ data: vendors });\n    } catch (error) {\n      handleError(error, req, res);\n    }\n  });\n\n  // Route: POST /api/v1/vendors - Create vendor\n  app.post('/api/v1/vendors', withAuth, async (req, res) => {\n    try {\n      requireRole(req.auth, 'superadmin');\n      \n      const validated = insertVendorSchema.parse(req.body);\n      const vendor = await storage.createVendor(validated);\n      \n      await auditAction(req.auth, 'create_vendor', 'vendors', vendor.id, undefined, vendor, req);\n      \n      res.status(201).json({ data: vendor });\n    } catch (error) {\n      handleError(error, req, res);\n    }\n  });\n\n  // Route: GET /api/v1/products - List products with filters\n  app.get('/api/v1/products', withAuth, async (req, res) => {\n    try {\n      requirePermission(req.auth, 'read:products');\n      \n      const { q, brand, category_id, tags, allergens, updated_after, sort = '-updated_at', cursor, limit = 50 } = req.query;\n      \n      // Use read replica for search queries\n      const isSearchQuery = q || brand || tags || allergens;\n      \n      let products;\n      if (isSearchQuery && q) {\n        products = await storage.searchProducts(req.auth.vendorId, q as string, {\n          brand: brand as string,\n          categoryId: category_id as string,\n          tags: tags ? (tags as string).split(',') : undefined,\n          allergens: allergens ? (allergens as string).split(',') : undefined,\n          limit: parseInt(limit as string)\n        });\n      } else {\n        products = await storage.getProducts(req.auth.vendorId, {\n          brand: brand as string,\n          categoryId: category_id as string,\n          updatedAfter: updated_after as string,\n          sort: sort as string,\n          limit: parseInt(limit as string)\n        });\n      }\n\n      // Include freshness indicator for read replica queries\n      const response: any = { data: products };\n      if (isSearchQuery) {\n        response.freshness = 'fresh'; // In production, check actual replica lag\n      }\n      \n      res.json(response);\n    } catch (error) {\n      handleError(error, req, res);\n    }\n  });\n\n  // Route: POST /api/v1/products - Batch create/update products\n  app.post('/api/v1/products', withAuth, withIdempotency(async (req: any, res: any, vendorId: string) => {\n    try {\n      requirePermission(req.auth, 'write:products');\n      \n      const products = Array.isArray(req.body) ? req.body : [req.body];\n      \n      if (products.length === 0) {\n        throw new ValidationError('Request body must contain at least one product');\n      }\n      \n      if (products.length > 10000) {\n        throw new ValidationError('Cannot process more than 10,000 products per batch');\n      }\n\n      const validated = products.map(product => \n        insertProductSchema.parse({ ...product, vendorId })\n      );\n\n      const result = await storage.createProducts(validated);\n      \n      await auditAction(req.auth, 'batch_create_products', 'products', undefined, undefined, { count: result.length }, req);\n      \n      const response = { data: result, count: result.length };\n      res.status(201).json(response);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }), async (req, res) => {\n    handleError(error, req, res);\n  });\n\n  // Route: GET /api/v1/products/:id - Get single product\n  app.get('/api/v1/products/:id', withAuth, async (req, res) => {\n    try {\n      requirePermission(req.auth, 'read:products');\n      \n      const product = await storage.getProduct(req.params.id, req.auth.vendorId);\n      if (!product) {\n        throw new NotFoundError('Product', req.params.id);\n      }\n      \n      res.json({ data: product });\n    } catch (error) {\n      handleError(error, req, res);\n    }\n  });\n\n  // Route: PATCH /api/v1/products/:id - Update product\n  app.patch('/api/v1/products/:id', withAuth, withIdempotency(async (req: any, res: any, vendorId: string) => {\n    try {\n      requirePermission(req.auth, 'write:products');\n      \n      const before = await storage.getProduct(req.params.id, req.auth.vendorId);\n      if (!before) {\n        throw new NotFoundError('Product', req.params.id);\n      }\n\n      const updates = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(req.params.id, req.auth.vendorId, updates);\n      \n      await auditAction(req.auth, 'update_product', 'products', req.params.id, before, product, req);\n      \n      const response = { data: product };\n      res.json(response);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }), async (req, res) => {\n    handleError(error, req, res);\n  });\n\n  // Route: DELETE /api/v1/products/:id - Soft delete product\n  app.delete('/api/v1/products/:id', withAuth, async (req, res) => {\n    try {\n      requirePermission(req.auth, 'write:products');\n      \n      const before = await storage.getProduct(req.params.id, req.auth.vendorId);\n      if (!before) {\n        throw new NotFoundError('Product', req.params.id);\n      }\n\n      const success = await storage.deleteProduct(req.params.id, req.auth.vendorId);\n      if (!success) {\n        throw new NotFoundError('Product', req.params.id);\n      }\n      \n      await auditAction(req.auth, 'delete_product', 'products', req.params.id, before, undefined, req);\n      \n      res.status(204).send();\n    } catch (error) {\n      handleError(error, req, res);\n    }\n  });\n\n  // Route: GET /api/v1/customers - List customers\n  app.get('/api/v1/customers', withAuth, async (req, res) => {\n    try {\n      requirePermission(req.auth, 'read:customers');\n      \n      const { q, limit = 50 } = req.query;\n      \n      let customers;\n      if (q) {\n        customers = await storage.searchCustomers(req.auth.vendorId, q as string, {\n          limit: parseInt(limit as string)\n        });\n      } else {\n        customers = await storage.getCustomers(req.auth.vendorId, {\n          limit: parseInt(limit as string)\n        });\n      }\n      \n      res.json({ data: customers });\n    } catch (error) {\n      handleError(error, req, res);\n    }\n  });\n\n  // Route: POST /api/v1/customers - Batch create/update customers\n  app.post('/api/v1/customers', withAuth, withIdempotency(async (req: any, res: any, vendorId: string) => {\n    try {\n      requirePermission(req.auth, 'write:customers');\n      \n      const customers = Array.isArray(req.body) ? req.body : [req.body];\n      const validated = customers.map(customer => \n        insertCustomerSchema.parse({ ...customer, vendorId })\n      );\n\n      const result = await storage.createCustomers(validated);\n      \n      await auditAction(req.auth, 'batch_create_customers', 'customers', undefined, undefined, { count: result.length }, req);\n      \n      const response = { data: result, count: result.length };\n      res.status(201).json(response);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }), async (req, res) => {\n    handleError(error, req, res);\n  });\n\n  // Route: GET /api/v1/customers/:id - Get customer\n  app.get('/api/v1/customers/:id', withAuth, async (req, res) => {\n    try {\n      requirePermission(req.auth, 'read:customers');\n      \n      const customer = await storage.getCustomer(req.params.id, req.auth.vendorId);\n      if (!customer) {\n        throw new NotFoundError('Customer', req.params.id);\n      }\n      \n      res.json({ data: customer });\n    } catch (error) {\n      handleError(error, req, res);\n    }\n  });\n\n  // Route: GET /api/v1/customers/:id/health - Get customer health profile\n  app.get('/api/v1/customers/:id/health', withAuth, auditHealthMiddleware(async (req: any, res: any, context: any) => {\n    try {\n      requireRole(context, 'vendor_admin', 'vendor_operator');\n      \n      // In production, this would fetch from customer_health_profiles table\n      const healthProfile = {\n        customerId: req.params.id,\n        heightCm: 175,\n        weightKg: 70,\n        age: 30,\n        gender: 'male',\n        activityLevel: 'moderate',\n        conditions: ['diabetes'],\n        bmi: 22.86,\n        bmr: 1680,\n        tdeeCached: 2604,\n        derivedLimits: {\n          calories: 2604,\n          sodium: 1500,\n          sugar: 25,\n          fiber: 35\n        }\n      };\n      \n      res.json({ data: healthProfile });\n    } catch (error) {\n      throw error;\n    }\n  }));\n\n  // Route: PUT /api/v1/customers/:id/health - Update customer health profile\n  app.put('/api/v1/customers/:id/health', withAuth, auditHealthMiddleware(async (req: any, res: any, context: any) => {\n    try {\n      requireRole(context, 'vendor_admin', 'vendor_operator');\n      \n      const validated = insertCustomerHealthProfileSchema.parse({\n        ...req.body,\n        customerId: req.params.id\n      });\n\n      const metrics = calculateHealthMetrics(validated, DEFAULT_CONDITION_RULES);\n      \n      const healthProfile = {\n        ...validated,\n        ...metrics\n      };\n      \n      // In production, this would update the customer_health_profiles table\n      \n      res.json({ data: healthProfile });\n    } catch (error) {\n      throw error;\n    }\n  }));\n\n  // Route: POST /api/v1/ingest/csv - Start CSV ingestion\n  app.post('/api/v1/ingest/csv', withAuth, async (req, res) => {\n    try {\n      requirePermission(req.auth, 'write:ingestion');\n      \n      const { mode } = req.query;\n      if (!mode || !['products', 'customers'].includes(mode as string)) {\n        throw new ValidationError('Mode must be either \"products\" or \"customers\"');\n      }\n\n      // Create ingestion job\n      const job = await storage.createIngestionJob({\n        vendorId: req.auth.vendorId,\n        mode: mode as any,\n        status: 'queued',\n        progressPct: 0,\n        attempt: 1,\n        params: req.body || {}\n      });\n\n      // Create TUS resumable upload URL\n      const filePath = `${req.auth.vendorId}/${job.id}/data.csv`;\n      const uploadData = await createResumableUpload('csv-uploads', filePath, 10 * 1024 * 1024 * 1024); // 10GB\n\n      // Enqueue the job\n      await queue.enqueue(req.auth.vendorId, mode as string, { jobId: job.id });\n      \n      await auditAction(req.auth, 'start_csv_ingestion', 'ingestion_jobs', job.id, undefined, { mode, jobId: job.id }, req);\n      \n      res.status(201).json({\n        job_id: job.id,\n        upload_url: uploadData.signedUrl,\n        resumable: true,\n        max_file_size: 10 * 1024 * 1024 * 1024\n      });\n    } catch (error) {\n      handleError(error, req, res);\n    }\n  });\n\n  // Route: GET /api/v1/jobs/:id - Get job status\n  app.get('/api/v1/jobs/:id', withAuth, async (req, res) => {\n    try {\n      const job = await storage.getIngestionJob(req.params.id);\n      if (!job || job.vendorId !== req.auth.vendorId) {\n        throw new NotFoundError('Ingestion job', req.params.id);\n      }\n      \n      res.json({ data: job });\n    } catch (error) {\n      handleError(error, req, res);\n    }\n  });\n\n  // Route: GET /api/v1/jobs - List ingestion jobs\n  app.get('/api/v1/jobs', withAuth, async (req, res) => {\n    try {\n      const { status } = req.query;\n      const jobs = await storage.getIngestionJobs(req.auth.vendorId, status as string);\n      \n      res.json({ data: jobs });\n    } catch (error) {\n      handleError(error, req, res);\n    }\n  });\n\n  // Route: GET /api/v1/search/products - Full-text search products\n  app.get('/api/v1/search/products', withAuth, async (req, res) => {\n    try {\n      requirePermission(req.auth, 'read:products');\n      \n      const { q, limit = 50 } = req.query;\n      if (!q) {\n        throw new ValidationError('Search query \"q\" is required');\n      }\n\n      // Use read replica for search\n      const products = await storage.searchProducts(req.auth.vendorId, q as string, {\n        limit: parseInt(limit as string)\n      });\n      \n      res.json({\n        data: products,\n        query: q,\n        freshness: 'fresh' // In production, check replica lag\n      });\n    } catch (error) {\n      handleError(error, req, res);\n    }\n  });\n\n  // Route: GET /api/v1/matches/:customerId - Get health-aware product matches\n  app.get('/api/v1/matches/:customerId', withAuth, async (req, res) => {\n    try {\n      requirePermission(req.auth, 'read:products');\n      requirePermission(req.auth, 'read:customers');\n      \n      const { k = 20 } = req.query;\n      \n      // Check if customer exists and belongs to vendor\n      const customer = await storage.getCustomer(req.params.customerId, req.auth.vendorId);\n      if (!customer) {\n        throw new NotFoundError('Customer', req.params.customerId);\n      }\n\n      // Get matches (simplified - in production this would use sophisticated health-aware scoring)\n      const matches = await storage.getMatches(req.params.customerId, req.auth.vendorId, parseInt(k as string));\n      \n      res.json({\n        data: matches,\n        customer_id: req.params.customerId,\n        k: parseInt(k as string),\n        cached: false // In production, check matches_cache table\n      });\n    } catch (error) {\n      handleError(error, req, res);\n    }\n  });\n\n  // Route: GET /api/v1/audit - Get audit logs\n  app.get('/api/v1/audit', withAuth, async (req, res) => {\n    try {\n      requireRole(req.auth, 'vendor_admin', 'superadmin');\n      \n      const { limit = 50, offset = 0 } = req.query;\n      const vendorId = req.auth.role === 'superadmin' ? undefined : req.auth.vendorId;\n      \n      const logs = await storage.getAuditLogs(vendorId, parseInt(limit as string), parseInt(offset as string));\n      \n      res.json({\n        data: logs,\n        pagination: {\n          limit: parseInt(limit as string),\n          offset: parseInt(offset as string)\n        }\n      });\n    } catch (error) {\n      handleError(error, req, res);\n    }\n  });\n\n  // Route: POST /api/v1/webhooks/endpoints - Create webhook endpoint\n  app.post('/api/v1/webhooks/endpoints', withAuth, withIdempotency(async (req: any, res: any, vendorId: string) => {\n    try {\n      requireRole(req.auth, 'vendor_admin');\n      \n      const validated = insertWebhookEndpointSchema.parse({\n        ...req.body,\n        vendorId\n      });\n\n      // In production, store webhook secret in Supabase Vault\n      const endpoint = {\n        ...validated,\n        id: crypto.randomUUID(),\n        secretRef: 'vault_secret_id', // Would be actual vault reference\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      \n      await auditAction(req.auth, 'create_webhook_endpoint', 'webhook_endpoints', endpoint.id, undefined, endpoint, req);\n      \n      const response = { data: endpoint };\n      res.status(201).json(response);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }), async (req, res) => {\n    handleError(error, req, res);\n  });\n\n  // Error handling middleware\n  app.use((err: any, req: any, res: any, next: any) => {\n    handleError(err, req, res);\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":17386},"server/storage.ts":{"content":"import { type Vendor, type InsertVendor, type User, type InsertUser, type Product, type Customer, type IngestionJob, type AuditLogEntry, type SystemMetrics, type DatabaseHealth } from \"@shared/schema\";\nimport { db } from \"./lib/database\";\nimport { vendors, users, products, customers, ingestionJobs, auditLog } from \"@shared/schema\";\nimport { eq, and, desc, gte, lte, sql, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Vendor management\n  getVendor(id: string): Promise<Vendor | undefined>;\n  getVendors(): Promise<Vendor[]>;\n  createVendor(vendor: InsertVendor): Promise<Vendor>;\n  updateVendor(id: string, updates: Partial<InsertVendor>): Promise<Vendor | undefined>;\n\n  // Product management\n  getProducts(vendorId: string, filters?: any): Promise<Product[]>;\n  getProduct(id: string, vendorId: string): Promise<Product | undefined>;\n  createProducts(products: InsertProduct[]): Promise<Product[]>;\n  updateProduct(id: string, vendorId: string, updates: Partial<InsertProduct>): Promise<Product | undefined>;\n  deleteProduct(id: string, vendorId: string): Promise<boolean>;\n\n  // Customer management\n  getCustomers(vendorId: string, filters?: any): Promise<Customer[]>;\n  getCustomer(id: string, vendorId: string): Promise<Customer | undefined>;\n  createCustomers(customers: InsertCustomer[]): Promise<Customer[]>;\n  updateCustomer(id: string, vendorId: string, updates: Partial<InsertCustomer>): Promise<Customer | undefined>;\n  deleteCustomer(id: string, vendorId: string): Promise<boolean>;\n\n  // Ingestion jobs\n  getIngestionJob(id: string): Promise<IngestionJob | undefined>;\n  getIngestionJobs(vendorId: string, status?: string): Promise<IngestionJob[]>;\n  createIngestionJob(job: InsertIngestionJob): Promise<IngestionJob>;\n  updateIngestionJob(id: string, updates: Partial<IngestionJob>): Promise<IngestionJob | undefined>;\n\n  // Audit logging\n  createAuditLog(entry: InsertAuditLogEntry): Promise<AuditLogEntry>;\n  getAuditLogs(vendorId?: string, limit?: number, offset?: number): Promise<AuditLogEntry[]>;\n\n  // System metrics\n  getSystemMetrics(): Promise<SystemMetrics>;\n  getDatabaseHealth(): Promise<DatabaseHealth>;\n\n  // Search\n  searchProducts(vendorId: string, query: string, filters?: any): Promise<Product[]>;\n  searchCustomers(vendorId: string, query: string, filters?: any): Promise<Customer[]>;\n\n  // Matching\n  getMatches(customerId: string, vendorId: string, k?: number): Promise<Product[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  async getVendor(id: string): Promise<Vendor | undefined> {\n    const result = await db.select().from(vendors).where(eq(vendors.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getVendors(): Promise<Vendor[]> {\n    return await db.select().from(vendors).orderBy(vendors.name);\n  }\n\n  async createVendor(vendor: InsertVendor): Promise<Vendor> {\n    const result = await db.insert(vendors).values(vendor).returning();\n    return result[0];\n  }\n\n  async updateVendor(id: string, updates: Partial<InsertVendor>): Promise<Vendor | undefined> {\n    const result = await db\n      .update(vendors)\n      .set({ ...updates, updatedAt: sql`now()` })\n      .where(eq(vendors.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async getProducts(vendorId: string, filters?: any): Promise<Product[]> {\n    let query = db.select().from(products).where(eq(products.vendorId, vendorId));\n    \n    if (filters?.status) {\n      query = query.where(eq(products.status, filters.status));\n    }\n    \n    if (filters?.limit) {\n      query = query.limit(filters.limit);\n    }\n    \n    return await query.orderBy(desc(products.updatedAt));\n  }\n\n  async getProduct(id: string, vendorId: string): Promise<Product | undefined> {\n    const result = await db\n      .select()\n      .from(products)\n      .where(and(eq(products.id, id), eq(products.vendorId, vendorId)))\n      .limit(1);\n    return result[0];\n  }\n\n  async createProducts(productList: InsertProduct[]): Promise<Product[]> {\n    if (productList.length === 0) return [];\n    return await db.insert(products).values(productList).returning();\n  }\n\n  async updateProduct(id: string, vendorId: string, updates: Partial<InsertProduct>): Promise<Product | undefined> {\n    const result = await db\n      .update(products)\n      .set({ ...updates, updatedAt: sql`now()` })\n      .where(and(eq(products.id, id), eq(products.vendorId, vendorId)))\n      .returning();\n    return result[0];\n  }\n\n  async deleteProduct(id: string, vendorId: string): Promise<boolean> {\n    const result = await db\n      .update(products)\n      .set({ softDeletedAt: sql`now()` })\n      .where(and(eq(products.id, id), eq(products.vendorId, vendorId)))\n      .returning();\n    return result.length > 0;\n  }\n\n  async getCustomers(vendorId: string, filters?: any): Promise<Customer[]> {\n    let query = db.select().from(customers).where(eq(customers.vendorId, vendorId));\n    \n    if (filters?.limit) {\n      query = query.limit(filters.limit);\n    }\n    \n    return await query.orderBy(desc(customers.updatedAt));\n  }\n\n  async getCustomer(id: string, vendorId: string): Promise<Customer | undefined> {\n    const result = await db\n      .select()\n      .from(customers)\n      .where(and(eq(customers.id, id), eq(customers.vendorId, vendorId)))\n      .limit(1);\n    return result[0];\n  }\n\n  async createCustomers(customerList: InsertCustomer[]): Promise<Customer[]> {\n    if (customerList.length === 0) return [];\n    return await db.insert(customers).values(customerList).returning();\n  }\n\n  async updateCustomer(id: string, vendorId: string, updates: Partial<InsertCustomer>): Promise<Customer | undefined> {\n    const result = await db\n      .update(customers)\n      .set({ ...updates, updatedAt: sql`now()` })\n      .where(and(eq(customers.id, id), eq(customers.vendorId, vendorId)))\n      .returning();\n    return result[0];\n  }\n\n  async deleteCustomer(id: string, vendorId: string): Promise<boolean> {\n    // Soft delete by setting a flag or removing from active list\n    // For now, we'll just return true as this would be implemented based on business rules\n    return true;\n  }\n\n  async getIngestionJob(id: string): Promise<IngestionJob | undefined> {\n    const result = await db.select().from(ingestionJobs).where(eq(ingestionJobs.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getIngestionJobs(vendorId: string, status?: string): Promise<IngestionJob[]> {\n    let query = db.select().from(ingestionJobs).where(eq(ingestionJobs.vendorId, vendorId));\n    \n    if (status) {\n      query = query.where(eq(ingestionJobs.status, status as any));\n    }\n    \n    return await query.orderBy(desc(ingestionJobs.createdAt));\n  }\n\n  async createIngestionJob(job: InsertIngestionJob): Promise<IngestionJob> {\n    const result = await db.insert(ingestionJobs).values(job).returning();\n    return result[0];\n  }\n\n  async updateIngestionJob(id: string, updates: Partial<IngestionJob>): Promise<IngestionJob | undefined> {\n    const result = await db\n      .update(ingestionJobs)\n      .set(updates)\n      .where(eq(ingestionJobs.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async createAuditLog(entry: InsertAuditLogEntry): Promise<AuditLogEntry> {\n    const result = await db.insert(auditLog).values(entry).returning();\n    return result[0];\n  }\n\n  async getAuditLogs(vendorId?: string, limit = 50, offset = 0): Promise<AuditLogEntry[]> {\n    let query = db.select().from(auditLog);\n    \n    if (vendorId) {\n      query = query.where(eq(auditLog.vendorId, vendorId));\n    }\n    \n    return await query\n      .orderBy(desc(auditLog.timestamp))\n      .limit(limit)\n      .offset(offset);\n  }\n\n  async getSystemMetrics(): Promise<SystemMetrics> {\n    // Get active jobs count\n    const activeJobsResult = await db\n      .select({ count: count() })\n      .from(ingestionJobs)\n      .where(eq(ingestionJobs.status, 'running'));\n\n    // Get daily jobs count\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const dailyJobsResult = await db\n      .select({ count: count() })\n      .from(ingestionJobs)\n      .where(gte(ingestionJobs.createdAt, today));\n\n    // In a real implementation, these would come from monitoring systems\n    return {\n      searchP95: 245, // ms\n      matchesP95: 387, // ms\n      dailyJobs: dailyJobsResult[0].count,\n      availability: 99.97, // %\n      activeJobs: activeJobsResult[0].count,\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  async getDatabaseHealth(): Promise<DatabaseHealth> {\n    // In a real implementation, these would query actual database metrics\n    // For now, return simulated but realistic values\n    return {\n      primary: {\n        cpu: 23,\n        memory: 67,\n        connections: 142,\n        maxConnections: 200\n      },\n      replicas: [\n        { id: 'replica-1', status: 'Healthy', lag: 0.8 },\n        { id: 'replica-2', status: 'Healthy', lag: 1.2 }\n      ],\n      partitions: {\n        products: 752,\n        customers: 1504,\n        vendors: 47\n      }\n    };\n  }\n\n  async searchProducts(vendorId: string, query: string, filters?: any): Promise<Product[]> {\n    // Simple text search - in production this would use full-text search\n    let dbQuery = db.select().from(products).where(eq(products.vendorId, vendorId));\n    \n    if (query) {\n      dbQuery = dbQuery.where(sql`${products.name} ILIKE ${`%${query}%`} OR ${products.brand} ILIKE ${`%${query}%`}`);\n    }\n    \n    if (filters?.limit) {\n      dbQuery = dbQuery.limit(filters.limit);\n    }\n    \n    return await dbQuery.orderBy(desc(products.updatedAt));\n  }\n\n  async searchCustomers(vendorId: string, query: string, filters?: any): Promise<Customer[]> {\n    // Simple text search - in production this would use full-text search\n    let dbQuery = db.select().from(customers).where(eq(customers.vendorId, vendorId));\n    \n    if (query) {\n      dbQuery = dbQuery.where(sql`${customers.fullName} ILIKE ${`%${query}%`} OR ${customers.email} ILIKE ${`%${query}%`}`);\n    }\n    \n    if (filters?.limit) {\n      dbQuery = dbQuery.limit(filters.limit);\n    }\n    \n    return await dbQuery.orderBy(desc(customers.updatedAt));\n  }\n\n  async getMatches(customerId: string, vendorId: string, k = 20): Promise<Product[]> {\n    // Simple matching implementation - in production this would use sophisticated health-aware scoring\n    return await db\n      .select()\n      .from(products)\n      .where(and(eq(products.vendorId, vendorId), eq(products.status, 'active')))\n      .limit(k)\n      .orderBy(desc(products.updatedAt));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11200},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { \n  pgTable, \n  text, \n  varchar, \n  uuid, \n  timestamp, \n  numeric, \n  integer, \n  jsonb, \n  boolean,\n  pgEnum,\n  index,\n  uniqueIndex,\n  primaryKey\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum('user_role', ['superadmin', 'vendor_admin', 'vendor_operator', 'vendor_viewer']);\nexport const vendorStatusEnum = pgEnum('vendor_status', ['active', 'inactive', 'suspended']);\nexport const productStatusEnum = pgEnum('product_status', ['active', 'inactive']);\nexport const customerGenderEnum = pgEnum('customer_gender', ['male', 'female', 'other', 'unspecified']);\nexport const activityLevelEnum = pgEnum('activity_level', ['sedentary', 'light', 'moderate', 'very', 'extra']);\nexport const jobStatusEnum = pgEnum('job_status', ['queued', 'running', 'failed', 'completed', 'canceled']);\nexport const jobModeEnum = pgEnum('job_mode', ['products', 'customers', 'api_sync']);\nexport const sourceEnum = pgEnum('source', ['csv', 'api']);\nexport const gtinTypeEnum = pgEnum('gtin_type', ['UPC', 'EAN', 'ISBN']);\nexport const authTypeEnum = pgEnum('auth_type', ['api_key', 'oauth2', 'basic']);\nexport const synonymDomainEnum = pgEnum('synonym_domain', ['allergen', 'condition', 'unit', 'diet', 'gender', 'activity']);\nexport const consentTypeEnum = pgEnum('consent_type', ['data_processing', 'health_data', 'marketing']);\nexport const webhookEventEnum = pgEnum('webhook_event', ['job.completed', 'job.failed', 'product.updated', 'customer.updated']);\nexport const deliveryStatusEnum = pgEnum('delivery_status', ['pending', 'delivered', 'failed', 'retry']);\n\n// Core tables\nexport const vendors = pgTable(\"vendors\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  status: vendorStatusEnum(\"status\").notNull().default('active'),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n  settingsJson: jsonb(\"settings_json\").default('{}'),\n  catalogVersion: integer(\"catalog_version\").notNull().default(1)\n});\n\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  displayName: text(\"display_name\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`)\n});\n\nexport const userLinks = pgTable(\"user_links\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").notNull().references(() => users.id),\n  vendorId: uuid(\"vendor_id\").notNull().references(() => vendors.id),\n  role: userRoleEnum(\"role\").notNull(),\n  status: text(\"status\").notNull().default('active'),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`)\n}, (table) => ({\n  uniqueUserVendor: uniqueIndex(\"unique_user_vendor\").on(table.userId, table.vendorId)\n}));\n\nexport const platformAdmins = pgTable(\"platform_admins\", {\n  userId: uuid(\"user_id\").primaryKey().references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  createdBy: uuid(\"created_by\").references(() => users.id)\n});\n\n// Product tables (partitioned)\nexport const products = pgTable(\"products\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  vendorId: uuid(\"vendor_id\").notNull().references(() => vendors.id),\n  externalId: text(\"external_id\").notNull(),\n  name: text(\"name\").notNull(),\n  brand: text(\"brand\"),\n  description: text(\"description\"),\n  categoryId: uuid(\"category_id\"),\n  price: numeric(\"price\", { precision: 12, scale: 2 }),\n  currency: varchar(\"currency\", { length: 3 }).notNull().default('USD'),\n  status: productStatusEnum(\"status\").notNull().default('active'),\n  searchTsv: text(\"search_tsv\"), // tsvector will be handled in SQL\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n  // Optional fields\n  barcode: text(\"barcode\"),\n  gtinType: gtinTypeEnum(\"gtin_type\"),\n  ingredients: text(\"ingredients\"),\n  subCategoryId: uuid(\"sub_category_id\"),\n  cuisineId: uuid(\"cuisine_id\"),\n  marketId: uuid(\"market_id\"),\n  nutrition: jsonb(\"nutrition\"),\n  servingSize: text(\"serving_size\"),\n  packageWeight: text(\"package_weight\"),\n  dietaryTags: text(\"dietary_tags\").array(),\n  allergens: text(\"allergens\").array(),\n  certifications: text(\"certifications\").array(),\n  regulatoryCodes: text(\"regulatory_codes\").array(),\n  sourceUrl: text(\"source_url\"),\n  softDeletedAt: timestamp(\"soft_deleted_at\")\n}, (table) => ({\n  uniqueVendorExternal: uniqueIndex(\"unique_vendor_external_id\").on(table.vendorId, table.externalId),\n  uniqueVendorBarcode: uniqueIndex(\"unique_vendor_barcode\").on(table.vendorId, table.barcode)\n}));\n\nexport const productImages = pgTable(\"product_images\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: uuid(\"product_id\").notNull().references(() => products.id),\n  url: text(\"url\").notNull(),\n  alt: text(\"alt\"),\n  order: integer(\"order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`)\n});\n\nexport const productSources = pgTable(\"product_sources\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: uuid(\"product_id\").notNull().references(() => products.id),\n  source: sourceEnum(\"source\").notNull(),\n  sourceRef: text(\"source_ref\"),\n  ingestionJobId: uuid(\"ingestion_job_id\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`)\n});\n\n// Customer tables (partitioned)\nexport const customers = pgTable(\"customers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  vendorId: uuid(\"vendor_id\").notNull().references(() => vendors.id),\n  externalId: text(\"external_id\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  email: text(\"email\").notNull(),\n  dob: timestamp(\"dob\"),\n  age: integer(\"age\"),\n  gender: customerGenderEnum(\"gender\"),\n  location: jsonb(\"location\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n  // Optional fields\n  phone: text(\"phone\"),\n  customTags: text(\"custom_tags\").array(),\n  searchTsv: text(\"search_tsv\"),\n  createdBy: uuid(\"created_by\"),\n  updatedBy: uuid(\"updated_by\")\n}, (table) => ({\n  uniqueVendorExternal: uniqueIndex(\"unique_customer_vendor_external\").on(table.vendorId, table.externalId)\n}));\n\nexport const customerHealthProfiles = pgTable(\"customer_health_profiles\", {\n  customerId: uuid(\"customer_id\").primaryKey().references(() => customers.id),\n  heightCm: numeric(\"height_cm\", { precision: 5, scale: 2 }).notNull(),\n  weightKg: numeric(\"weight_kg\", { precision: 6, scale: 2 }).notNull(),\n  age: integer(\"age\").notNull(),\n  gender: customerGenderEnum(\"gender\").notNull(),\n  activityLevel: activityLevelEnum(\"activity_level\").notNull(),\n  conditions: text(\"conditions\").array().notNull().default('{}'),\n  dietGoals: text(\"diet_goals\").array().notNull().default('{}'),\n  macroTargets: jsonb(\"macro_targets\").notNull().default('{}'),\n  avoidAllergens: text(\"avoid_allergens\").array().notNull().default('{}'),\n  // Derived fields\n  bmi: numeric(\"bmi\", { precision: 5, scale: 2 }),\n  bmr: numeric(\"bmr\", { precision: 8, scale: 2 }),\n  tdeeCached: numeric(\"tdee_cached\", { precision: 8, scale: 2 }),\n  derivedLimits: jsonb(\"derived_limits\").default('{}'),\n  // Audit fields\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n  updatedBy: uuid(\"updated_by\")\n});\n\nexport const customerConsents = pgTable(\"customer_consents\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: uuid(\"customer_id\").notNull().references(() => customers.id),\n  consentType: consentTypeEnum(\"consent_type\").notNull(),\n  granted: boolean(\"granted\").notNull(),\n  version: text(\"version\").notNull(),\n  timestamp: timestamp(\"timestamp\").notNull().default(sql`now()`)\n});\n\nexport const customerWhitelists = pgTable(\"customer_whitelists\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: uuid(\"customer_id\").notNull().references(() => customers.id),\n  productId: uuid(\"product_id\").notNull().references(() => products.id),\n  note: text(\"note\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`)\n});\n\nexport const customerBlacklists = pgTable(\"customer_blacklists\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: uuid(\"customer_id\").notNull().references(() => customers.id),\n  productId: uuid(\"product_id\").notNull().references(() => products.id),\n  note: text(\"note\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`)\n});\n\n// Taxonomy tables\nexport const taxCategories = pgTable(\"tax_categories\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  label: text(\"label\").notNull(),\n  parentId: uuid(\"parent_id\").references(() => taxCategories.id),\n  active: boolean(\"active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`)\n});\n\nexport const taxTags = pgTable(\"tax_tags\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  label: text(\"label\").notNull(),\n  parentId: uuid(\"parent_id\").references(() => taxTags.id),\n  active: boolean(\"active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`)\n});\n\nexport const taxAllergens = pgTable(\"tax_allergens\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  label: text(\"label\").notNull(),\n  parentId: uuid(\"parent_id\").references(() => taxAllergens.id),\n  active: boolean(\"active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`)\n});\n\nexport const taxCuisines = pgTable(\"tax_cuisines\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  label: text(\"label\").notNull(),\n  parentId: uuid(\"parent_id\").references(() => taxCuisines.id),\n  active: boolean(\"active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`)\n});\n\nexport const taxCertifications = pgTable(\"tax_certifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  label: text(\"label\").notNull(),\n  parentId: uuid(\"parent_id\").references(() => taxCertifications.id),\n  active: boolean(\"active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`)\n});\n\n// Synonym tables\nexport const synonymsHeader = pgTable(\"synonyms_header\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  canonical: text(\"canonical\").notNull(),\n  synonyms: text(\"synonyms\").array().notNull(),\n  transformOps: jsonb(\"transform_ops\").default('{}'),\n  confidence: numeric(\"confidence\", { precision: 3, scale: 2 }).notNull().default('1.0')\n});\n\nexport const synonymsValue = pgTable(\"synonyms_value\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  domain: synonymDomainEnum(\"domain\").notNull(),\n  canonical: text(\"canonical\").notNull(),\n  synonyms: text(\"synonyms\").array().notNull()\n});\n\nexport const vendorMappings = pgTable(\"vendor_mappings\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  vendorId: uuid(\"vendor_id\").notNull().references(() => vendors.id),\n  mode: jobModeEnum(\"mode\").notNull(),\n  map: jsonb(\"map\").notNull(),\n  version: integer(\"version\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`)\n});\n\n// Ingestion tables\nexport const ingestionJobs = pgTable(\"ingestion_jobs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  vendorId: uuid(\"vendor_id\").notNull().references(() => vendors.id),\n  mode: jobModeEnum(\"mode\").notNull(),\n  status: jobStatusEnum(\"status\").notNull().default('queued'),\n  progressPct: integer(\"progress_pct\").notNull().default(0),\n  totals: jsonb(\"totals\").default('{}'),\n  errorUrl: text(\"error_url\"),\n  startedAt: timestamp(\"started_at\"),\n  finishedAt: timestamp(\"finished_at\"),\n  attempt: integer(\"attempt\").notNull().default(1),\n  params: jsonb(\"params\").default('{}'),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`)\n});\n\nexport const ingestionJobErrors = pgTable(\"ingestion_job_errors\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: uuid(\"job_id\").notNull().references(() => ingestionJobs.id),\n  rowNo: integer(\"row_no\").notNull(),\n  field: text(\"field\"),\n  code: text(\"code\").notNull(),\n  message: text(\"message\").notNull(),\n  raw: jsonb(\"raw\")\n});\n\n// Staging tables\nexport const stgProducts = pgTable(\"stg_products\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: uuid(\"job_id\").notNull(),\n  vendorId: uuid(\"vendor_id\").notNull(),\n  externalId: text(\"external_id\"),\n  name: text(\"name\"),\n  brand: text(\"brand\"),\n  description: text(\"description\"),\n  categoryId: text(\"category_id\"),\n  price: text(\"price\"),\n  currency: text(\"currency\"),\n  barcode: text(\"barcode\"),\n  gtinType: text(\"gtin_type\"),\n  ingredients: text(\"ingredients\"),\n  nutrition: text(\"nutrition\"),\n  servingSize: text(\"serving_size\"),\n  packageWeight: text(\"package_weight\"),\n  dietaryTags: text(\"dietary_tags\"),\n  allergens: text(\"allergens\"),\n  certifications: text(\"certifications\"),\n  regulatoryCodes: text(\"regulatory_codes\"),\n  sourceUrl: text(\"source_url\"),\n  rawData: jsonb(\"raw_data\")\n});\n\nexport const stgCustomers = pgTable(\"stg_customers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: uuid(\"job_id\").notNull(),\n  vendorId: uuid(\"vendor_id\").notNull(),\n  externalId: text(\"external_id\"),\n  fullName: text(\"full_name\"),\n  email: text(\"email\"),\n  dob: text(\"dob\"),\n  age: text(\"age\"),\n  gender: text(\"gender\"),\n  location: text(\"location\"),\n  phone: text(\"phone\"),\n  customTags: text(\"custom_tags\"),\n  rawData: jsonb(\"raw_data\")\n});\n\nexport const stgVendorRaw = pgTable(\"stg_vendor_raw\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  vendorId: uuid(\"vendor_id\").notNull().references(() => vendors.id),\n  source: text(\"source\").notNull(),\n  pageId: text(\"page_id\"),\n  payload: jsonb(\"payload\").notNull(),\n  fetchedAt: timestamp(\"fetched_at\").notNull().default(sql`now()`)\n});\n\n// Connector tables\nexport const connectors = pgTable(\"connectors\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  vendorId: uuid(\"vendor_id\").notNull().references(() => vendors.id),\n  source: text(\"source\").notNull(),\n  baseUrl: text(\"base_url\").notNull(),\n  authType: authTypeEnum(\"auth_type\").notNull(),\n  rateLimitRpm: integer(\"rate_limit_rpm\").notNull().default(60),\n  secretsRef: text(\"secrets_ref\"),\n  enabled: boolean(\"enabled\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`)\n});\n\nexport const connectorCursors = pgTable(\"connector_cursors\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  vendorId: uuid(\"vendor_id\").notNull().references(() => vendors.id),\n  source: text(\"source\").notNull(),\n  cursor: text(\"cursor\"),\n  syncedAt: timestamp(\"synced_at\"),\n  status: text(\"status\").notNull().default('pending')\n});\n\n// Cache tables\nexport const matchesCache = pgTable(\"matches_cache\", {\n  vendorId: uuid(\"vendor_id\").notNull().references(() => vendors.id),\n  customerId: uuid(\"customer_id\").notNull().references(() => customers.id),\n  catalogVersion: integer(\"catalog_version\").notNull(),\n  results: jsonb(\"results\").notNull(),\n  ttlAt: timestamp(\"ttl_at\").notNull()\n}, (table) => ({\n  pk: primaryKey({ columns: [table.vendorId, table.customerId, table.catalogVersion] })\n}));\n\n// Policy tables\nexport const dietRules = pgTable(\"diet_rules\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  vendorId: uuid(\"vendor_id\").notNull().references(() => vendors.id),\n  conditionCode: text(\"condition_code\").notNull(),\n  policy: jsonb(\"policy\").notNull(),\n  active: boolean(\"active\").notNull().default(true),\n  version: integer(\"version\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`)\n});\n\nexport const scoringPolicies = pgTable(\"scoring_policies\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  vendorId: uuid(\"vendor_id\").notNull().references(() => vendors.id),\n  weights: jsonb(\"weights\").notNull(),\n  active: boolean(\"active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`)\n});\n\n// Webhook tables\nexport const webhookEndpoints = pgTable(\"webhook_endpoints\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  vendorId: uuid(\"vendor_id\").notNull().references(() => vendors.id),\n  url: text(\"url\").notNull(),\n  secretRef: text(\"secret_ref\"),\n  enabled: boolean(\"enabled\").notNull().default(true),\n  description: text(\"description\"),\n  retriesMax: integer(\"retries_max\").notNull().default(3),\n  toleranceSec: integer(\"tolerance_sec\").notNull().default(300),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`)\n});\n\nexport const webhookDeliveries = pgTable(\"webhook_deliveries\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  endpointId: uuid(\"endpoint_id\").notNull().references(() => webhookEndpoints.id),\n  eventType: webhookEventEnum(\"event_type\").notNull(),\n  payload: jsonb(\"payload\").notNull(),\n  status: deliveryStatusEnum(\"status\").notNull().default('pending'),\n  attempt: integer(\"attempt\").notNull().default(1),\n  lastError: text(\"last_error\"),\n  signature: text(\"signature\"),\n  timestamp: timestamp(\"timestamp\").notNull().default(sql`now()`)\n});\n\n// Idempotency table\nexport const idempotencyKeys = pgTable(\"idempotency_keys\", {\n  key: text(\"key\").primaryKey(),\n  vendorId: uuid(\"vendor_id\").notNull().references(() => vendors.id),\n  method: text(\"method\").notNull(),\n  path: text(\"path\").notNull(),\n  requestHash: text(\"request_hash\").notNull(),\n  responseHash: text(\"response_hash\"),\n  status: text(\"status\").notNull().default('processing'),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  expiresAt: timestamp(\"expires_at\").notNull()\n});\n\n// Audit table\nexport const auditLog = pgTable(\"audit_log\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  actorUserId: uuid(\"actor_user_id\"),\n  actorRole: text(\"actor_role\"),\n  vendorId: uuid(\"vendor_id\").references(() => vendors.id),\n  action: text(\"action\").notNull(),\n  entity: text(\"entity\").notNull(),\n  entityId: text(\"entity_id\"),\n  before: jsonb(\"before\"),\n  after: jsonb(\"after\"),\n  ip: text(\"ip\"),\n  ua: text(\"ua\"),\n  justification: text(\"justification\"),\n  timestamp: timestamp(\"timestamp\").notNull().default(sql`now()`)\n}, (table) => ({\n  timestampIdx: index(\"audit_log_timestamp_idx\").on(table.timestamp),\n  vendorIdx: index(\"audit_log_vendor_idx\").on(table.vendorId),\n  entityIdx: index(\"audit_log_entity_idx\").on(table.entity, table.entityId)\n}));\n\n// Insert schemas\nexport const insertVendorSchema = createInsertSchema(vendors).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertUserLinkSchema = createInsertSchema(userLinks).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertProductSchema = createInsertSchema(products).omit({ id: true, createdAt: true, updatedAt: true, searchTsv: true });\nexport const insertCustomerSchema = createInsertSchema(customers).omit({ id: true, createdAt: true, updatedAt: true, searchTsv: true });\nexport const insertCustomerHealthProfileSchema = createInsertSchema(customerHealthProfiles).omit({ bmi: true, bmr: true, tdeeCached: true, derivedLimits: true, createdAt: true, updatedAt: true });\nexport const insertIngestionJobSchema = createInsertSchema(ingestionJobs).omit({ id: true, createdAt: true });\nexport const insertWebhookEndpointSchema = createInsertSchema(webhookEndpoints).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertAuditLogSchema = createInsertSchema(auditLog).omit({ id: true, timestamp: true });\n\n// Select types\nexport type Vendor = typeof vendors.$inferSelect;\nexport type User = typeof users.$inferSelect;\nexport type UserLink = typeof userLinks.$inferSelect;\nexport type Product = typeof products.$inferSelect;\nexport type Customer = typeof customers.$inferSelect;\nexport type CustomerHealthProfile = typeof customerHealthProfiles.$inferSelect;\nexport type IngestionJob = typeof ingestionJobs.$inferSelect;\nexport type WebhookEndpoint = typeof webhookEndpoints.$inferSelect;\nexport type AuditLogEntry = typeof auditLog.$inferSelect;\n\n// Insert types\nexport type InsertVendor = z.infer<typeof insertVendorSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertUserLink = z.infer<typeof insertUserLinkSchema>;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type InsertCustomerHealthProfile = z.infer<typeof insertCustomerHealthProfileSchema>;\nexport type InsertIngestionJob = z.infer<typeof insertIngestionJobSchema>;\nexport type InsertWebhookEndpoint = z.infer<typeof insertWebhookEndpointSchema>;\nexport type InsertAuditLogEntry = z.infer<typeof insertAuditLogSchema>;\n\n// API types\nexport interface PaginationParams {\n  cursor?: string;\n  limit?: number;\n}\n\nexport interface SearchFilters {\n  q?: string;\n  brand?: string;\n  categoryId?: string;\n  tags?: string[];\n  allergens?: string[];\n  updatedAfter?: string;\n  sort?: 'relevance' | '-updated_at' | 'name';\n}\n\nexport interface MatchingParams {\n  customerId: string;\n  k?: number;\n  filters?: SearchFilters;\n}\n\nexport interface HealthMetrics {\n  bmi: number;\n  bmr: number;\n  tdee: number;\n  derivedLimits: Record<string, any>;\n}\n\nexport interface JobProgress {\n  processed: number;\n  total: number;\n  errors: number;\n  warnings: number;\n}\n\nexport interface SystemMetrics {\n  searchP95: number;\n  matchesP95: number;\n  dailyJobs: number;\n  availability: number;\n  activeJobs: number;\n  lastUpdated: string;\n}\n\nexport interface DatabaseHealth {\n  primary: {\n    cpu: number;\n    memory: number;\n    connections: number;\n    maxConnections: number;\n  };\n  replicas: Array<{\n    id: string;\n    status: string;\n    lag: number;\n  }>;\n  partitions: {\n    products: number;\n    customers: number;\n    vendors: number;\n  };\n}\n","size_bytes":23483},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Vendors from \"@/pages/vendors\";\nimport Products from \"@/pages/products\";\nimport Customers from \"@/pages/customers\";\nimport Ingestion from \"@/pages/ingestion\";\nimport Analytics from \"@/pages/analytics\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/vendors\" component={Vendors} />\n      <Route path=\"/products\" component={Products} />\n      <Route path=\"/customers\" component={Customers} />\n      <Route path=\"/ingestion\" component={Ingestion} />\n      <Route path=\"/analytics\" component={Analytics} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1197},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/lib/audit.ts":{"content":"import { db } from \"./database\";\nimport { auditLog } from \"@shared/schema\";\nimport type { InsertAuditLogEntry, AuthContext } from \"@shared/schema\";\nimport type { Request } from \"express\";\n\nexport async function auditAction(\n  context: AuthContext,\n  action: string,\n  entity: string,\n  entityId?: string,\n  before?: any,\n  after?: any,\n  req?: Request\n): Promise<void> {\n  try {\n    const auditEntry: InsertAuditLogEntry = {\n      actorUserId: context.userId,\n      actorRole: context.role,\n      vendorId: context.vendorId,\n      action,\n      entity,\n      entityId,\n      before,\n      after,\n      ip: req?.ip || req?.socket?.remoteAddress,\n      ua: req?.get('User-Agent')\n    };\n\n    await db.insert(auditLog).values(auditEntry);\n  } catch (error) {\n    // Audit logging should not fail the main operation\n    console.error('Failed to create audit log:', error);\n  }\n}\n\nexport async function auditHealthAccess(\n  context: AuthContext,\n  action: string,\n  customerId: string,\n  before?: any,\n  after?: any,\n  req?: Request\n): Promise<void> {\n  await auditAction(\n    context,\n    action,\n    'customer_health_profile',\n    customerId,\n    before,\n    after,\n    req\n  );\n}\n\nexport async function auditRBACChange(\n  context: AuthContext,\n  action: string,\n  targetUserId: string,\n  before?: any,\n  after?: any,\n  req?: Request\n): Promise<void> {\n  await auditAction(\n    context,\n    action,\n    'user_links',\n    targetUserId,\n    before,\n    after,\n    req\n  );\n}\n\nexport async function auditBreakGlassAccess(\n  context: AuthContext,\n  targetEntity: string,\n  targetEntityId: string,\n  justification: string,\n  req?: Request\n): Promise<void> {\n  const auditEntry: InsertAuditLogEntry = {\n    actorUserId: context.userId,\n    actorRole: context.role,\n    vendorId: context.vendorId,\n    action: 'break_glass_access',\n    entity: targetEntity,\n    entityId: targetEntityId,\n    justification,\n    ip: req?.ip || req?.socket?.remoteAddress,\n    ua: req?.get('User-Agent')\n  };\n\n  await db.insert(auditLog).values(auditEntry);\n}\n\n// Middleware to automatically audit health data access\nexport function auditHealthMiddleware(handler: Function) {\n  return async (req: Request, context: AuthContext, ...args: any[]) => {\n    const customerId = req.params.customerId || req.body.customerId;\n    \n    // Get before state if this is an update operation\n    let before: any = null;\n    if (req.method === 'PUT' || req.method === 'PATCH') {\n      // In a real implementation, this would fetch the current state\n      before = { note: 'Previous state would be captured here' };\n    }\n\n    const result = await handler(req, context, ...args);\n\n    // Get after state if this was a mutation\n    let after: any = null;\n    if (req.method === 'POST' || req.method === 'PUT' || req.method === 'PATCH') {\n      after = { note: 'New state would be captured here' };\n    }\n\n    await auditHealthAccess(\n      context,\n      `${req.method.toLowerCase()}_health_profile`,\n      customerId,\n      before,\n      after,\n      req\n    );\n\n    return result;\n  };\n}\n\nexport async function getAuditTrail(\n  vendorId?: string,\n  entity?: string,\n  entityId?: string,\n  limit = 100,\n  offset = 0\n) {\n  let query = db.select().from(auditLog);\n\n  const conditions = [];\n  if (vendorId) conditions.push(`vendor_id = '${vendorId}'`);\n  if (entity) conditions.push(`entity = '${entity}'`);\n  if (entityId) conditions.push(`entity_id = '${entityId}'`);\n\n  if (conditions.length > 0) {\n    query = query.where(sql`${sql.raw(conditions.join(' AND '))}`);\n  }\n\n  return await query\n    .orderBy(desc(auditLog.timestamp))\n    .limit(limit)\n    .offset(offset);\n}\n","size_bytes":3628},"server/lib/auth.ts":{"content":"import { type Request } from \"express\";\nimport { Client } from 'appwrite';\n\nif (!process.env.APPWRITE_ENDPOINT || !process.env.APPWRITE_PROJECT_ID) {\n  throw new Error(\"APPWRITE_ENDPOINT and APPWRITE_PROJECT_ID environment variables are required\");\n}\n\nconst client = new Client()\n  .setEndpoint(process.env.APPWRITE_ENDPOINT)\n  .setProject(process.env.APPWRITE_PROJECT_ID);\n\nexport interface AuthContext {\n  userId: string;\n  email: string;\n  vendorId: string;\n  role: string;\n  permissions: string[];\n}\n\nexport async function validateJWT(token: string): Promise<AuthContext> {\n  try {\n    // In a real implementation, this would validate the JWT and extract user info\n    // For now, we'll simulate the validation\n    \n    if (!token || token === 'invalid') {\n      throw new Error('Invalid or missing token');\n    }\n\n    // Mock user context - in production this would come from JWT claims\n    return {\n      userId: 'user-123',\n      email: 'admin@example.com',\n      vendorId: 'vendor-123',\n      role: 'vendor_admin',\n      permissions: ['read:products', 'write:products', 'read:customers', 'write:customers']\n    };\n  } catch (error) {\n    throw new Error(`JWT validation failed: ${(error as Error).message}`);\n  }\n}\n\nexport function extractAuthFromRequest(req: Request): string | null {\n  const authHeader = req.headers.authorization;\n  if (!authHeader) return null;\n  \n  const [bearer, token] = authHeader.split(' ');\n  if (bearer !== 'Bearer' || !token) return null;\n  \n  return token;\n}\n\nexport function requireAuth(req: Request): Promise<AuthContext> {\n  const token = extractAuthFromRequest(req);\n  if (!token) {\n    throw new Error('Authorization token required');\n  }\n  \n  return validateJWT(token);\n}\n\nexport function hasPermission(context: AuthContext, permission: string): boolean {\n  return context.permissions.includes(permission) || context.role === 'superadmin';\n}\n\nexport function requirePermission(context: AuthContext, permission: string): void {\n  if (!hasPermission(context, permission)) {\n    throw new Error(`Permission denied: ${permission}`);\n  }\n}\n\nexport function requireRole(context: AuthContext, ...allowedRoles: string[]): void {\n  if (!allowedRoles.includes(context.role) && context.role !== 'superadmin') {\n    throw new Error(`Role not authorized: ${context.role}`);\n  }\n}\n","size_bytes":2311},"server/lib/database.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is required\");\n}\n\nconst client = postgres(process.env.DATABASE_URL, {\n  max: 20,\n  idle_timeout: 30,\n  connect_timeout: 10,\n});\n\nexport const db = drizzle(client, { schema });\n\n// Read replica connection (in production, this would be a separate URL)\nconst readClient = postgres(process.env.READ_DATABASE_URL || process.env.DATABASE_URL, {\n  max: 10,\n  idle_timeout: 30,\n  connect_timeout: 10,\n});\n\nexport const readDb = drizzle(readClient, { schema });\n\nexport { sql } from \"drizzle-orm\";\n","size_bytes":702},"server/lib/errors.ts":{"content":"import type { Response } from 'express';\n\n// RFC 9457 Problem Details for HTTP APIs\nexport interface ProblemDetails {\n  type?: string;\n  title: string;\n  status: number;\n  detail?: string;\n  instance?: string;\n  errors?: FieldError[];\n  [key: string]: any;\n}\n\nexport interface FieldError {\n  field: string;\n  code: string;\n  message: string;\n  value?: any;\n}\n\nexport class ApiError extends Error {\n  public readonly status: number;\n  public readonly title: string;\n  public readonly type?: string;\n  public readonly detail?: string;\n  public readonly errors?: FieldError[];\n\n  constructor(\n    status: number,\n    title: string,\n    detail?: string,\n    type?: string,\n    errors?: FieldError[]\n  ) {\n    super(title);\n    this.status = status;\n    this.title = title;\n    this.detail = detail;\n    this.type = type;\n    this.errors = errors;\n    this.name = 'ApiError';\n  }\n}\n\n// Common error constructors\nexport class ValidationError extends ApiError {\n  constructor(message: string, errors?: FieldError[]) {\n    super(\n      400,\n      'Validation Failed',\n      message,\n      'https://api.odyssey.com/problems/validation-failed',\n      errors\n    );\n  }\n}\n\nexport class AuthenticationError extends ApiError {\n  constructor(message = 'Authentication required') {\n    super(\n      401,\n      'Authentication Required',\n      message,\n      'https://api.odyssey.com/problems/authentication-required'\n    );\n  }\n}\n\nexport class AuthorizationError extends ApiError {\n  constructor(message = 'Insufficient permissions') {\n    super(\n      403,\n      'Authorization Failed',\n      message,\n      'https://api.odyssey.com/problems/authorization-failed'\n    );\n  }\n}\n\nexport class NotFoundError extends ApiError {\n  constructor(resource: string, id?: string) {\n    const detail = id ? `${resource} with id '${id}' not found` : `${resource} not found`;\n    super(\n      404,\n      'Resource Not Found',\n      detail,\n      'https://api.odyssey.com/problems/not-found'\n    );\n  }\n}\n\nexport class ConflictError extends ApiError {\n  constructor(message: string) {\n    super(\n      409,\n      'Conflict',\n      message,\n      'https://api.odyssey.com/problems/conflict'\n    );\n  }\n}\n\nexport class RateLimitError extends ApiError {\n  constructor(retryAfter?: number) {\n    super(\n      429,\n      'Rate Limit Exceeded',\n      'Too many requests',\n      'https://api.odyssey.com/problems/rate-limit-exceeded'\n    );\n    if (retryAfter) {\n      (this as any).retryAfter = retryAfter;\n    }\n  }\n}\n\nexport class InternalServerError extends ApiError {\n  constructor(message = 'An internal server error occurred') {\n    super(\n      500,\n      'Internal Server Error',\n      message,\n      'https://api.odyssey.com/problems/internal-server-error'\n    );\n  }\n}\n\nexport class ServiceUnavailableError extends ApiError {\n  constructor(message = 'Service temporarily unavailable') {\n    super(\n      503,\n      'Service Unavailable',\n      message,\n      'https://api.odyssey.com/problems/service-unavailable'\n    );\n  }\n}\n\n// Error response formatter\nexport function formatErrorResponse(error: ApiError, instance?: string): ProblemDetails {\n  return {\n    type: error.type,\n    title: error.title,\n    status: error.status,\n    detail: error.detail,\n    instance,\n    ...(error.errors && { errors: error.errors }),\n    ...(error as any).retryAfter && { retryAfter: (error as any).retryAfter }\n  };\n}\n\n// Express error handler\nexport function handleError(error: any, req: any, res: Response): void {\n  let apiError: ApiError;\n\n  if (error instanceof ApiError) {\n    apiError = error;\n  } else if (error.name === 'ValidationError') {\n    // Handle Zod validation errors\n    const fieldErrors: FieldError[] = error.errors?.map((err: any) => ({\n      field: err.path?.join('.') || 'unknown',\n      code: err.code || 'invalid',\n      message: err.message,\n      value: err.received\n    })) || [];\n\n    apiError = new ValidationError('Request validation failed', fieldErrors);\n  } else if (error.code === '23505') {\n    // PostgreSQL unique constraint violation\n    apiError = new ConflictError('Resource already exists');\n  } else if (error.code === '23503') {\n    // PostgreSQL foreign key constraint violation\n    apiError = new ValidationError('Referenced resource does not exist');\n  } else if (error.code === '23514') {\n    // PostgreSQL check constraint violation\n    apiError = new ValidationError('Data violates business rules');\n  } else {\n    // Unknown error - don't expose details in production\n    console.error('Unhandled error:', error);\n    apiError = new InternalServerError(\n      process.env.NODE_ENV === 'development' ? error.message : undefined\n    );\n  }\n\n  const problemDetails = formatErrorResponse(apiError, req.originalUrl);\n\n  res.status(apiError.status)\n    .type('application/problem+json')\n    .json(problemDetails);\n}\n\n// Helper to validate required fields\nexport function validateRequired(data: any, fields: string[]): void {\n  const missing = fields.filter(field => \n    data[field] === undefined || data[field] === null || data[field] === ''\n  );\n\n  if (missing.length > 0) {\n    const errors: FieldError[] = missing.map(field => ({\n      field,\n      code: 'required',\n      message: `${field} is required`\n    }));\n\n    throw new ValidationError('Required fields missing', errors);\n  }\n}\n\n// Helper to validate pagination parameters\nexport function validatePagination(cursor?: string, limit?: number): { cursor?: string; limit: number } {\n  const maxLimit = 200;\n  const defaultLimit = 50;\n\n  if (limit && (limit < 1 || limit > maxLimit)) {\n    throw new ValidationError(`Limit must be between 1 and ${maxLimit}`);\n  }\n\n  return {\n    cursor: cursor || undefined,\n    limit: limit || defaultLimit\n  };\n}\n","size_bytes":5715},"server/lib/health.ts":{"content":"import type { CustomerHealthProfile } from \"@shared/schema\";\n\nexport interface HealthMetrics {\n  bmi: number;\n  bmr: number;\n  tdee: number;\n  derivedLimits: Record<string, any>;\n}\n\n// Exact Mifflin-St Jeor BMR calculation as specified in PRD\nexport function calculateBMR(\n  weightKg: number,\n  heightCm: number,\n  age: number,\n  gender: 'male' | 'female' | 'other' | 'unspecified'\n): number {\n  if (gender === 'male') {\n    return 10 * weightKg + 6.25 * heightCm - 5 * age + 5;\n  } else {\n    // Use female formula for all non-male genders\n    return 10 * weightKg + 6.25 * heightCm - 5 * age - 161;\n  }\n}\n\n// TDEE calculation with exact activity factors from PRD\nexport function calculateTDEE(bmr: number, activityLevel: string): number {\n  const factors = {\n    sedentary: 1.2,\n    light: 1.375,\n    moderate: 1.55,\n    very: 1.725,\n    extra: 1.9\n  };\n\n  const factor = factors[activityLevel as keyof typeof factors] || 1.2;\n  return bmr * factor;\n}\n\n// BMI calculation\nexport function calculateBMI(weightKg: number, heightCm: number): number {\n  const heightM = heightCm / 100;\n  return weightKg / (heightM * heightM);\n}\n\n// Derive daily nutrient limits based on health conditions\nexport function deriveDailyLimits(\n  profile: Partial<CustomerHealthProfile>,\n  conditionRules: any[] = []\n): Record<string, any> {\n  const baseLimits = {\n    calories: profile.tdeeCached || 2000,\n    sodium: 2300, // mg\n    sugar: 50, // g\n    saturatedFat: 20, // g\n    cholesterol: 300, // mg\n    fiber: 25 // g (target, not limit)\n  };\n\n  // Apply condition-specific modifications\n  const derivedLimits = { ...baseLimits };\n\n  for (const condition of profile.conditions || []) {\n    const rule = conditionRules.find(r => r.conditionCode === condition);\n    if (rule && rule.policy.dailyLimits) {\n      Object.assign(derivedLimits, rule.policy.dailyLimits);\n    }\n  }\n\n  return derivedLimits;\n}\n\n// Calculate comprehensive health metrics\nexport function calculateHealthMetrics(\n  profile: Partial<CustomerHealthProfile>,\n  conditionRules: any[] = []\n): HealthMetrics {\n  const bmi = calculateBMI(\n    Number(profile.weightKg),\n    Number(profile.heightCm)\n  );\n\n  const bmr = calculateBMR(\n    Number(profile.weightKg),\n    Number(profile.heightCm),\n    Number(profile.age),\n    profile.gender || 'unspecified'\n  );\n\n  const tdee = calculateTDEE(bmr, profile.activityLevel || 'sedentary');\n\n  const derivedLimits = deriveDailyLimits(\n    { ...profile, tdeeCached: tdee },\n    conditionRules\n  );\n\n  return {\n    bmi: Math.round(bmi * 100) / 100,\n    bmr: Math.round(bmr * 100) / 100,\n    tdee: Math.round(tdee * 100) / 100,\n    derivedLimits\n  };\n}\n\n// Health-aware product scoring for matching\nexport function scoreProductForHealth(\n  product: any,\n  customerProfile: CustomerHealthProfile\n): number {\n  let score = 100; // Base score\n\n  // Check allergen restrictions (hard filter in practice)\n  const productAllergens = product.allergens || [];\n  const avoidAllergens = customerProfile.avoidAllergens || [];\n  \n  for (const allergen of productAllergens) {\n    if (avoidAllergens.includes(allergen)) {\n      return 0; // Hard exclusion\n    }\n  }\n\n  // Apply soft budget scoring based on derived limits\n  const nutrition = product.nutrition || {};\n  const limits = customerProfile.derivedLimits || {};\n\n  // Penalize products that consume large fractions of daily budgets\n  if (limits.sodium && nutrition.sodium) {\n    const sodiumFraction = nutrition.sodium / limits.sodium;\n    if (sodiumFraction > 0.3) {\n      score -= 20 * sodiumFraction;\n    }\n  }\n\n  if (limits.sugar && nutrition.sugar) {\n    const sugarFraction = nutrition.sugar / limits.sugar;\n    if (sugarFraction > 0.25) {\n      score -= 25 * sugarFraction;\n    }\n  }\n\n  // Bonus for fiber (beneficial for many conditions)\n  if (nutrition.fiber && customerProfile.conditions?.includes('diabetes')) {\n    score += Math.min(15, nutrition.fiber * 2);\n  }\n\n  // Ensure score doesn't go below 0\n  return Math.max(0, Math.round(score));\n}\n\n// Default condition rules (would be stored in database)\nexport const DEFAULT_CONDITION_RULES = [\n  {\n    conditionCode: 'diabetes',\n    policy: {\n      dailyLimits: {\n        sugar: 25, // Reduced sugar limit\n        fiber: 35 // Increased fiber target\n      }\n    }\n  },\n  {\n    conditionCode: 'hypertension',\n    policy: {\n      dailyLimits: {\n        sodium: 1500 // Reduced sodium limit\n      }\n    }\n  },\n  {\n    conditionCode: 'heart_disease',\n    policy: {\n      dailyLimits: {\n        saturatedFat: 13, // Reduced saturated fat\n        cholesterol: 200 // Reduced cholesterol\n      }\n    }\n  }\n];\n","size_bytes":4593},"server/lib/idempotency.ts":{"content":"import crypto from 'crypto';\nimport { db } from './database';\nimport { idempotencyKeys } from '@shared/schema';\nimport { eq, and, lt, sql } from 'drizzle-orm';\nimport type { Request, Response } from 'express';\n\nexport interface IdempotencyResult {\n  isReplay: boolean;\n  response?: any;\n}\n\n// Create hash of request for duplicate detection\nfunction createRequestHash(method: string, path: string, body: any): string {\n  const content = `${method}:${path}:${JSON.stringify(body || {})}`;\n  return crypto.createHash('sha256').update(content).digest('hex');\n}\n\n// Handle idempotency for requests\nexport async function handleIdempotency(\n  req: Request,\n  vendorId: string\n): Promise<IdempotencyResult> {\n  const idempotencyKey = req.headers['idempotency-key'] as string;\n  \n  if (!idempotencyKey) {\n    throw new Error('Idempotency-Key header is required for POST/PUT/PATCH requests');\n  }\n\n  // Validate idempotency key format\n  if (!/^[a-zA-Z0-9_-]{1,64}$/.test(idempotencyKey)) {\n    throw new Error('Idempotency-Key must be 1-64 characters and contain only alphanumeric characters, hyphens, and underscores');\n  }\n\n  const method = req.method;\n  const path = req.path;\n  const requestHash = createRequestHash(method, path, req.body);\n\n  try {\n    // Check if we've seen this idempotency key before\n    const existing = await db\n      .select()\n      .from(idempotencyKeys)\n      .where(\n        and(\n          eq(idempotencyKeys.key, idempotencyKey),\n          eq(idempotencyKeys.vendorId, vendorId)\n        )\n      )\n      .limit(1);\n\n    if (existing.length > 0) {\n      const record = existing[0];\n      \n      // Check if the request hash matches (same request)\n      if (record.requestHash !== requestHash) {\n        throw new Error('Idempotency key reused with different request parameters');\n      }\n\n      // If we have a completed response, return it\n      if (record.status === 'completed' && record.responseHash) {\n        return {\n          isReplay: true,\n          response: JSON.parse(record.responseHash)\n        };\n      }\n\n      // If still processing, return conflict\n      if (record.status === 'processing') {\n        throw new Error('Request with this idempotency key is still being processed');\n      }\n    } else {\n      // Create new idempotency record\n      const expiresAt = new Date();\n      expiresAt.setHours(expiresAt.getHours() + 24); // 24 hour expiry\n\n      await db.insert(idempotencyKeys).values({\n        key: idempotencyKey,\n        vendorId,\n        method,\n        path,\n        requestHash,\n        status: 'processing',\n        expiresAt\n      });\n    }\n\n    return { isReplay: false };\n  } catch (error) {\n    // If it's a constraint violation, the key was inserted by another request\n    if ((error as any).code === '23505') { // unique constraint violation\n      throw new Error('Concurrent request with same idempotency key detected');\n    }\n    throw error;\n  }\n}\n\n// Store successful response for replay\nexport async function storeIdempotencyResponse(\n  idempotencyKey: string,\n  vendorId: string,\n  response: any\n): Promise<void> {\n  try {\n    await db\n      .update(idempotencyKeys)\n      .set({\n        responseHash: JSON.stringify(response),\n        status: 'completed'\n      })\n      .where(\n        and(\n          eq(idempotencyKeys.key, idempotencyKey),\n          eq(idempotencyKeys.vendorId, vendorId)\n        )\n      );\n  } catch (error) {\n    console.error('Failed to store idempotency response:', error);\n  }\n}\n\n// Mark idempotency key as failed\nexport async function markIdempotencyFailed(\n  idempotencyKey: string,\n  vendorId: string,\n  error: string\n): Promise<void> {\n  try {\n    await db\n      .update(idempotencyKeys)\n      .set({\n        status: 'failed',\n        responseHash: JSON.stringify({ error })\n      })\n      .where(\n        and(\n          eq(idempotencyKeys.key, idempotencyKey),\n          eq(idempotencyKeys.vendorId, vendorId)\n        )\n      );\n  } catch (err) {\n    console.error('Failed to mark idempotency as failed:', err);\n  }\n}\n\n// Clean up expired idempotency keys\nexport async function cleanupExpiredKeys(): Promise<void> {\n  try {\n    const result = await db\n      .delete(idempotencyKeys)\n      .where(lt(idempotencyKeys.expiresAt, sql`now()`));\n    \n    console.log(`Cleaned up ${result.rowCount} expired idempotency keys`);\n  } catch (error) {\n    console.error('Failed to cleanup expired idempotency keys:', error);\n  }\n}\n\n// Middleware wrapper for idempotent endpoints\nexport function withIdempotency(handler: Function) {\n  return async (req: Request, res: Response, vendorId: string, ...args: any[]) => {\n    // Only apply to mutation methods\n    if (!['POST', 'PUT', 'PATCH'].includes(req.method)) {\n      return handler(req, res, vendorId, ...args);\n    }\n\n    const idempotencyKey = req.headers['idempotency-key'] as string;\n    \n    try {\n      const result = await handleIdempotency(req, vendorId);\n      \n      if (result.isReplay) {\n        // Return cached response\n        return res.json(result.response);\n      }\n\n      // Execute the handler\n      const response = await handler(req, res, vendorId, ...args);\n      \n      // Store successful response\n      if (idempotencyKey && res.statusCode >= 200 && res.statusCode < 300) {\n        await storeIdempotencyResponse(idempotencyKey, vendorId, response);\n      }\n\n      return response;\n    } catch (error) {\n      // Mark as failed\n      if (idempotencyKey) {\n        await markIdempotencyFailed(idempotencyKey, vendorId, (error as Error).message);\n      }\n      throw error;\n    }\n  };\n}\n","size_bytes":5547},"server/lib/queue.ts":{"content":"import { db } from \"./database\";\nimport { ingestionJobs } from \"@shared/schema\";\nimport { eq, sql } from \"drizzle-orm\";\nimport type { IngestionJob } from \"@shared/schema\";\n\nexport interface QueueJob {\n  id: string;\n  vendorId: string;\n  mode: string;\n  params: any;\n  attempt: number;\n}\n\nexport class PostgresQueue {\n  private running = false;\n  private concurrency = 5;\n  private workers: Array<Promise<void>> = [];\n\n  async enqueue(vendorId: string, mode: string, params: any = {}): Promise<string> {\n    const result = await db.insert(ingestionJobs).values({\n      vendorId,\n      mode: mode as any,\n      status: 'queued',\n      params,\n      attempt: 1\n    }).returning();\n\n    return result[0].id;\n  }\n\n  async dequeue(vendorId?: string): Promise<QueueJob | null> {\n    try {\n      // Use SELECT ... FOR UPDATE SKIP LOCKED pattern for concurrent workers\n      const result = await db.execute(sql`\n        UPDATE ingestion_jobs \n        SET status = 'running', started_at = NOW()\n        WHERE id = (\n          SELECT id FROM ingestion_jobs \n          WHERE status = 'queued' \n          ${vendorId ? sql`AND vendor_id = ${vendorId}` : sql``}\n          ORDER BY created_at\n          FOR UPDATE SKIP LOCKED\n          LIMIT 1\n        )\n        RETURNING id, vendor_id, mode, params, attempt\n      `);\n\n      if (result.rows.length === 0) {\n        return null;\n      }\n\n      const row = result.rows[0] as any;\n      return {\n        id: row.id,\n        vendorId: row.vendor_id,\n        mode: row.mode,\n        params: row.params || {},\n        attempt: row.attempt\n      };\n    } catch (error) {\n      console.error('Failed to dequeue job:', error);\n      return null;\n    }\n  }\n\n  async markCompleted(jobId: string, result?: any): Promise<void> {\n    await db.update(ingestionJobs)\n      .set({\n        status: 'completed',\n        finishedAt: sql`now()`,\n        progressPct: 100,\n        ...(result ? { totals: result } : {})\n      })\n      .where(eq(ingestionJobs.id, jobId));\n  }\n\n  async markFailed(jobId: string, error: string, shouldRetry = false): Promise<void> {\n    if (shouldRetry) {\n      // Exponential backoff retry\n      await db.execute(sql`\n        UPDATE ingestion_jobs \n        SET status = 'queued', \n            attempt = attempt + 1,\n            started_at = NULL\n        WHERE id = ${jobId} AND attempt < 3\n      `);\n    } else {\n      await db.update(ingestionJobs)\n        .set({\n          status: 'failed',\n          finishedAt: sql`now()`,\n          errorUrl: error // In production, this would be a URL to error details\n        })\n        .where(eq(ingestionJobs.id, jobId));\n    }\n  }\n\n  async updateProgress(jobId: string, progressPct: number, totals?: any): Promise<void> {\n    await db.update(ingestionJobs)\n      .set({\n        progressPct,\n        ...(totals ? { totals } : {})\n      })\n      .where(eq(ingestionJobs.id, jobId));\n  }\n\n  async start(processor: (job: QueueJob) => Promise<void>): Promise<void> {\n    if (this.running) return;\n    \n    this.running = true;\n    \n    // Start multiple workers\n    for (let i = 0; i < this.concurrency; i++) {\n      this.workers.push(this.worker(processor));\n    }\n\n    console.log(`Queue started with ${this.concurrency} workers`);\n  }\n\n  async stop(): Promise<void> {\n    this.running = false;\n    await Promise.all(this.workers);\n    this.workers = [];\n    console.log('Queue stopped');\n  }\n\n  private async worker(processor: (job: QueueJob) => Promise<void>): Promise<void> {\n    while (this.running) {\n      try {\n        const job = await this.dequeue();\n        \n        if (!job) {\n          // No jobs available, wait before polling again\n          await this.sleep(1000);\n          continue;\n        }\n\n        console.log(`Processing job ${job.id} (attempt ${job.attempt})`);\n        \n        try {\n          await processor(job);\n          await this.markCompleted(job.id);\n          console.log(`Job ${job.id} completed successfully`);\n        } catch (error) {\n          console.error(`Job ${job.id} failed:`, error);\n          const shouldRetry = job.attempt < 3;\n          await this.markFailed(job.id, (error as Error).message, shouldRetry);\n        }\n      } catch (error) {\n        console.error('Worker error:', error);\n        await this.sleep(5000); // Wait longer on worker errors\n      }\n    }\n  }\n\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\nexport const queue = new PostgresQueue();\n","size_bytes":4460},"server/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nif (!process.env.SUPABASE_URL || !process.env.SUPABASE_ANON_KEY) {\n  throw new Error(\"SUPABASE_URL and SUPABASE_ANON_KEY environment variables are required\");\n}\n\nexport const supabase = createClient(\n  process.env.SUPABASE_URL,\n  process.env.SUPABASE_ANON_KEY\n);\n\n// Service role client for server-side operations\nexport const supabaseAdmin = createClient(\n  process.env.SUPABASE_URL,\n  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n);\n\n// TUS resumable upload helper\nexport async function createResumableUpload(\n  bucket: string,\n  filePath: string,\n  maxFileSize = 10 * 1024 * 1024 * 1024 // 10GB\n) {\n  const { data, error } = await supabaseAdmin.storage\n    .from(bucket)\n    .createSignedUploadUrl(filePath, {\n      upsert: true,\n      resumable: true,\n      maxFileSize\n    });\n\n  if (error) {\n    throw new Error(`Failed to create resumable upload: ${error.message}`);\n  }\n\n  return data;\n}\n\n// Vault operations for secure secrets storage\nexport async function storeSecret(name: string, secret: string, description?: string) {\n  const { data, error } = await supabaseAdmin\n    .from('vault.secrets')\n    .insert({\n      name,\n      secret,\n      description\n    });\n\n  if (error) {\n    throw new Error(`Failed to store secret: ${error.message}`);\n  }\n\n  return data;\n}\n\nexport async function getSecret(secretRef: string): Promise<string> {\n  const { data, error } = await supabaseAdmin\n    .from('vault.decrypted_secrets')\n    .select('decrypted_secret')\n    .eq('id', secretRef)\n    .single();\n\n  if (error) {\n    throw new Error(`Failed to retrieve secret: ${error.message}`);\n  }\n\n  return data.decrypted_secret;\n}\n","size_bytes":1790},"server/lib/webhooks.ts":{"content":"import crypto from 'crypto';\nimport { db } from './database';\nimport { webhookEndpoints, webhookDeliveries } from '@shared/schema';\nimport { eq } from 'drizzle-orm';\nimport { getSecret } from './supabase';\n\nexport interface WebhookPayload {\n  eventType: string;\n  vendorId: string;\n  eventId: string;\n  occurredAt: string;\n  data: any;\n}\n\n// Generate HMAC-SHA256 signature (Stripe-style)\nexport function signWebhookPayload(\n  payload: string,\n  secret: string,\n  timestamp: number\n): string {\n  const signedPayload = `${timestamp}\\n${payload}`;\n  return crypto\n    .createHmac('sha256', secret)\n    .update(signedPayload, 'utf8')\n    .digest('hex');\n}\n\n// Verify webhook signature\nexport function verifyWebhookSignature(\n  payload: string,\n  signature: string,\n  secret: string,\n  timestamp: number,\n  toleranceSeconds = 300\n): boolean {\n  try {\n    // Check timestamp tolerance\n    const now = Math.floor(Date.now() / 1000);\n    if (Math.abs(now - timestamp) > toleranceSeconds) {\n      return false;\n    }\n\n    // Verify signature\n    const expectedSignature = signWebhookPayload(payload, secret, timestamp);\n    const providedSignature = signature.replace('sha256=', '');\n    \n    return crypto.timingSafeEqual(\n      Buffer.from(expectedSignature, 'hex'),\n      Buffer.from(providedSignature, 'hex')\n    );\n  } catch (error) {\n    return false;\n  }\n}\n\n// Deliver webhook with retry logic\nexport async function deliverWebhook(\n  endpointId: string,\n  eventType: string,\n  data: any\n): Promise<void> {\n  try {\n    // Get endpoint configuration\n    const endpoint = await db\n      .select()\n      .from(webhookEndpoints)\n      .where(eq(webhookEndpoints.id, endpointId))\n      .limit(1);\n\n    if (!endpoint[0] || !endpoint[0].enabled) {\n      console.log(`Webhook endpoint ${endpointId} not found or disabled`);\n      return;\n    }\n\n    const config = endpoint[0];\n    const timestamp = Math.floor(Date.now() / 1000);\n    \n    const payload: WebhookPayload = {\n      eventType,\n      vendorId: config.vendorId,\n      eventId: crypto.randomUUID(),\n      occurredAt: new Date().toISOString(),\n      data\n    };\n\n    const payloadString = JSON.stringify(payload);\n    \n    // Get webhook secret from vault\n    let signature = '';\n    if (config.secretRef) {\n      try {\n        const secret = await getSecret(config.secretRef);\n        signature = `sha256=${signWebhookPayload(payloadString, secret, timestamp)}`;\n      } catch (error) {\n        console.error(`Failed to get webhook secret: ${error}`);\n      }\n    }\n\n    // Create delivery record\n    const delivery = await db.insert(webhookDeliveries).values({\n      endpointId,\n      eventType: eventType as any,\n      payload,\n      signature,\n      status: 'pending',\n      attempt: 1\n    }).returning();\n\n    const deliveryId = delivery[0].id;\n\n    // Attempt delivery\n    try {\n      const response = await fetch(config.url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Timestamp': timestamp.toString(),\n          'X-Signature': signature,\n          'X-Event-Type': eventType,\n          'X-Delivery-ID': deliveryId,\n          'User-Agent': 'Odyssey-Webhooks/1.0'\n        },\n        body: payloadString,\n        signal: AbortSignal.timeout(30000) // 30 second timeout\n      });\n\n      if (response.ok) {\n        // Mark as delivered\n        await db.update(webhookDeliveries)\n          .set({ status: 'delivered' })\n          .where(eq(webhookDeliveries.id, deliveryId));\n        \n        console.log(`Webhook delivered successfully to ${config.url}`);\n      } else {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n    } catch (error) {\n      const errorMessage = (error as Error).message;\n      \n      // Mark as failed and schedule retry if needed\n      const shouldRetry = delivery[0].attempt < (config.retriesMax || 3);\n      \n      await db.update(webhookDeliveries)\n        .set({\n          status: shouldRetry ? 'retry' : 'failed',\n          lastError: errorMessage\n        })\n        .where(eq(webhookDeliveries.id, deliveryId));\n\n      if (shouldRetry) {\n        // Schedule retry with exponential backoff\n        const delay = Math.pow(2, delivery[0].attempt) * 1000; // 2^attempt seconds\n        setTimeout(() => retryWebhookDelivery(deliveryId), delay);\n      } else {\n        console.error(`Webhook delivery failed permanently: ${errorMessage}`);\n      }\n    }\n  } catch (error) {\n    console.error('Webhook delivery error:', error);\n  }\n}\n\n// Retry webhook delivery\nasync function retryWebhookDelivery(deliveryId: string): Promise<void> {\n  try {\n    const delivery = await db\n      .select()\n      .from(webhookDeliveries)\n      .where(eq(webhookDeliveries.id, deliveryId))\n      .limit(1);\n\n    if (!delivery[0] || delivery[0].status !== 'retry') {\n      return;\n    }\n\n    const record = delivery[0];\n    const newAttempt = record.attempt + 1;\n\n    // Update attempt count\n    await db.update(webhookDeliveries)\n      .set({ \n        attempt: newAttempt,\n        status: 'pending'\n      })\n      .where(eq(webhookDeliveries.id, deliveryId));\n\n    // Re-deliver\n    const endpoint = await db\n      .select()\n      .from(webhookEndpoints)\n      .where(eq(webhookEndpoints.id, record.endpointId))\n      .limit(1);\n\n    if (endpoint[0]) {\n      await deliverWebhook(\n        record.endpointId,\n        record.eventType,\n        record.payload.data\n      );\n    }\n  } catch (error) {\n    console.error('Webhook retry error:', error);\n  }\n}\n\n// Emit webhook events\nexport async function emitWebhookEvent(\n  vendorId: string,\n  eventType: string,\n  data: any\n): Promise<void> {\n  try {\n    // Get all enabled endpoints for this vendor\n    const endpoints = await db\n      .select()\n      .from(webhookEndpoints)\n      .where(eq(webhookEndpoints.vendorId, vendorId))\n      .where(eq(webhookEndpoints.enabled, true));\n\n    // Deliver to all endpoints\n    const deliveryPromises = endpoints.map(endpoint =>\n      deliverWebhook(endpoint.id, eventType, data)\n    );\n\n    await Promise.allSettled(deliveryPromises);\n  } catch (error) {\n    console.error('Failed to emit webhook event:', error);\n  }\n}\n\n// Generate idempotency key for webhooks\nexport function generateIdempotencyKey(): string {\n  return `whk_${Date.now()}_${crypto.randomBytes(8).toString('hex')}`;\n}\n","size_bytes":6322},"server/workers/ingestion.ts":{"content":"import { db } from '../lib/database';\nimport { storage } from '../storage';\nimport { supabaseAdmin } from '../lib/supabase';\nimport { emitWebhookEvent } from '../lib/webhooks';\nimport { stgProducts, stgCustomers, products, customers } from '@shared/schema';\nimport { eq, sql } from 'drizzle-orm';\nimport type { QueueJob } from '../lib/queue';\nimport csvParser from 'csv-parser';\nimport { Readable } from 'stream';\n\nexport interface IngestionResult {\n  processed: number;\n  succeeded: number;\n  failed: number;\n  errors: Array<{\n    row: number;\n    field?: string;\n    code: string;\n    message: string;\n    raw?: any;\n  }>;\n}\n\nexport async function processIngestionJob(job: QueueJob): Promise<IngestionResult> {\n  const { vendorId, mode, params } = job;\n  const jobId = job.id;\n\n  console.log(`Starting ${mode} ingestion job ${jobId} for vendor ${vendorId}`);\n\n  try {\n    // Download file from Supabase Storage\n    const filePath = `${vendorId}/${jobId}/data.csv`;\n    const { data: fileData, error } = await supabaseAdmin.storage\n      .from('csv-uploads')\n      .download(filePath);\n\n    if (error) {\n      throw new Error(`Failed to download file: ${error.message}`);\n    }\n\n    const fileBuffer = await fileData.arrayBuffer();\n    const fileContent = Buffer.from(fileBuffer).toString('utf-8');\n\n    let result: IngestionResult;\n\n    if (mode === 'products') {\n      result = await processProductsCSV(jobId, vendorId, fileContent);\n    } else if (mode === 'customers') {\n      result = await processCustomersCSV(jobId, vendorId, fileContent);\n    } else {\n      throw new Error(`Unsupported ingestion mode: ${mode}`);\n    }\n\n    // Generate errors CSV if there are errors\n    if (result.errors.length > 0) {\n      await generateErrorsCSV(jobId, result.errors);\n    }\n\n    // Update job completion\n    await storage.updateIngestionJob(jobId, {\n      status: 'completed',\n      finishedAt: new Date(),\n      progressPct: 100,\n      totals: {\n        processed: result.processed,\n        succeeded: result.succeeded,\n        failed: result.failed\n      }\n    });\n\n    // Emit webhook\n    await emitWebhookEvent(vendorId, 'job.completed', {\n      jobId,\n      mode,\n      result\n    });\n\n    console.log(`Completed ingestion job ${jobId}: ${result.succeeded}/${result.processed} rows succeeded`);\n    return result;\n\n  } catch (error) {\n    console.error(`Ingestion job ${jobId} failed:`, error);\n\n    await storage.updateIngestionJob(jobId, {\n      status: 'failed',\n      finishedAt: new Date(),\n      errorUrl: `Failed: ${(error as Error).message}`\n    });\n\n    // Emit failure webhook\n    await emitWebhookEvent(vendorId, 'job.failed', {\n      jobId,\n      mode,\n      error: (error as Error).message\n    });\n\n    throw error;\n  }\n}\n\nasync function processProductsCSV(\n  jobId: string,\n  vendorId: string,\n  csvContent: string\n): Promise<IngestionResult> {\n  const errors: IngestionResult['errors'] = [];\n  let processed = 0;\n  let succeeded = 0;\n\n  // Parse CSV and load into staging table using COPY\n  const stagingData: any[] = [];\n  \n  return new Promise((resolve, reject) => {\n    const parser = csvParser({\n      skipEmptyLines: true,\n      skipLinesWithError: false\n    });\n\n    let rowNumber = 0;\n\n    parser.on('data', (row) => {\n      rowNumber++;\n      processed++;\n\n      try {\n        // Basic validation and transformation\n        const stagingRow = {\n          jobId,\n          vendorId,\n          externalId: row.external_id || row.id,\n          name: row.name,\n          brand: row.brand,\n          description: row.description,\n          categoryId: row.category_id,\n          price: row.price,\n          currency: row.currency || 'USD',\n          barcode: row.barcode,\n          gtinType: row.gtin_type,\n          ingredients: row.ingredients,\n          nutrition: row.nutrition ? JSON.stringify(row.nutrition) : null,\n          servingSize: row.serving_size,\n          packageWeight: row.package_weight,\n          dietaryTags: row.dietary_tags,\n          allergens: row.allergens,\n          certifications: row.certifications,\n          regulatoryCodes: row.regulatory_codes,\n          sourceUrl: row.source_url,\n          rawData: row\n        };\n\n        // Validate required fields\n        if (!stagingRow.externalId) {\n          errors.push({\n            row: rowNumber,\n            field: 'external_id',\n            code: 'required',\n            message: 'External ID is required',\n            raw: row\n          });\n          return;\n        }\n\n        if (!stagingRow.name) {\n          errors.push({\n            row: rowNumber,\n            field: 'name',\n            code: 'required',\n            message: 'Product name is required',\n            raw: row\n          });\n          return;\n        }\n\n        stagingData.push(stagingRow);\n      } catch (error) {\n        errors.push({\n          row: rowNumber,\n          code: 'parse_error',\n          message: `Failed to parse row: ${(error as Error).message}`,\n          raw: row\n        });\n      }\n    });\n\n    parser.on('end', async () => {\n      try {\n        // Bulk insert into staging table\n        if (stagingData.length > 0) {\n          await db.insert(stgProducts).values(stagingData);\n        }\n\n        // Validate and merge to live table in batches\n        const batchSize = 100000; // 100k rows per batch\n        let offset = 0;\n\n        while (offset < stagingData.length) {\n          const batch = stagingData.slice(offset, offset + batchSize);\n          \n          // Use UPSERT with ON CONFLICT\n          await db.execute(sql`\n            INSERT INTO products (\n              vendor_id, external_id, name, brand, description, \n              category_id, price, currency, status\n            )\n            SELECT \n              vendor_id, external_id, name, brand, description,\n              category_id::uuid, price::numeric, currency, 'active'\n            FROM stg_products \n            WHERE job_id = ${jobId}\n            AND external_id IS NOT NULL \n            AND name IS NOT NULL\n            LIMIT ${batchSize} OFFSET ${offset}\n            ON CONFLICT (vendor_id, external_id) \n            DO UPDATE SET \n              name = EXCLUDED.name,\n              brand = EXCLUDED.brand,\n              description = EXCLUDED.description,\n              price = EXCLUDED.price,\n              updated_at = now()\n          `);\n\n          succeeded += batch.length;\n          offset += batchSize;\n\n          // Update progress\n          const progressPct = Math.floor((offset / stagingData.length) * 100);\n          await storage.updateIngestionJob(jobId, { progressPct });\n        }\n\n        // Analyze affected partitions for performance\n        await db.execute(sql`ANALYZE products`);\n\n        // Cleanup staging data\n        await db.delete(stgProducts).where(eq(stgProducts.jobId, jobId));\n\n        resolve({\n          processed,\n          succeeded,\n          failed: processed - succeeded,\n          errors\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n\n    parser.on('error', (error) => {\n      reject(error);\n    });\n\n    // Parse the CSV\n    const stream = Readable.from(csvContent);\n    stream.pipe(parser);\n  });\n}\n\nasync function processCustomersCSV(\n  jobId: string,\n  vendorId: string,\n  csvContent: string\n): Promise<IngestionResult> {\n  const errors: IngestionResult['errors'] = [];\n  let processed = 0;\n  let succeeded = 0;\n\n  // Similar implementation to products but for customers\n  const stagingData: any[] = [];\n  \n  return new Promise((resolve, reject) => {\n    const parser = csvParser({\n      skipEmptyLines: true,\n      skipLinesWithError: false\n    });\n\n    let rowNumber = 0;\n\n    parser.on('data', (row) => {\n      rowNumber++;\n      processed++;\n\n      try {\n        const stagingRow = {\n          jobId,\n          vendorId,\n          externalId: row.external_id || row.id,\n          fullName: row.full_name || row.name,\n          email: row.email,\n          dob: row.dob || row.date_of_birth,\n          age: row.age,\n          gender: row.gender,\n          location: row.location ? JSON.stringify(row.location) : null,\n          phone: row.phone,\n          customTags: row.custom_tags,\n          rawData: row\n        };\n\n        // Validate required fields\n        if (!stagingRow.externalId) {\n          errors.push({\n            row: rowNumber,\n            field: 'external_id',\n            code: 'required',\n            message: 'External ID is required',\n            raw: row\n          });\n          return;\n        }\n\n        if (!stagingRow.fullName) {\n          errors.push({\n            row: rowNumber,\n            field: 'full_name',\n            code: 'required',\n            message: 'Customer name is required',\n            raw: row\n          });\n          return;\n        }\n\n        if (!stagingRow.email) {\n          errors.push({\n            row: rowNumber,\n            field: 'email',\n            code: 'required',\n            message: 'Email is required',\n            raw: row\n          });\n          return;\n        }\n\n        stagingData.push(stagingRow);\n      } catch (error) {\n        errors.push({\n          row: rowNumber,\n          code: 'parse_error',\n          message: `Failed to parse row: ${(error as Error).message}`,\n          raw: row\n        });\n      }\n    });\n\n    parser.on('end', async () => {\n      try {\n        // Bulk insert into staging table\n        if (stagingData.length > 0) {\n          await db.insert(stgCustomers).values(stagingData);\n        }\n\n        // Merge to live table\n        await db.execute(sql`\n          INSERT INTO customers (\n            vendor_id, external_id, full_name, email, \n            dob, age, gender, location, phone\n          )\n          SELECT \n            vendor_id, external_id, full_name, email,\n            dob::date, age::integer, gender::customer_gender, \n            location::jsonb, phone\n          FROM stg_customers \n          WHERE job_id = ${jobId}\n          AND external_id IS NOT NULL \n          AND full_name IS NOT NULL\n          AND email IS NOT NULL\n          ON CONFLICT (vendor_id, external_id) \n          DO UPDATE SET \n            full_name = EXCLUDED.full_name,\n            email = EXCLUDED.email,\n            updated_at = now()\n        `);\n\n        succeeded = stagingData.length;\n\n        // Analyze affected partitions\n        await db.execute(sql`ANALYZE customers`);\n\n        // Cleanup staging data\n        await db.delete(stgCustomers).where(eq(stgCustomers.jobId, jobId));\n\n        resolve({\n          processed,\n          succeeded,\n          failed: processed - succeeded,\n          errors\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n\n    parser.on('error', (error) => {\n      reject(error);\n    });\n\n    // Parse the CSV\n    const stream = Readable.from(csvContent);\n    stream.pipe(parser);\n  });\n}\n\nasync function generateErrorsCSV(\n  jobId: string,\n  errors: IngestionResult['errors']\n): Promise<void> {\n  try {\n    // Generate CSV content\n    const headers = ['row', 'field', 'code', 'message', 'raw_data'];\n    const csvRows = [headers.join(',')];\n\n    for (const error of errors) {\n      const row = [\n        error.row,\n        error.field || '',\n        error.code,\n        `\"${error.message.replace(/\"/g, '\"\"')}\"`,\n        `\"${JSON.stringify(error.raw || {}).replace(/\"/g, '\"\"')}\"`\n      ];\n      csvRows.push(row.join(','));\n    }\n\n    const csvContent = csvRows.join('\\n');\n\n    // Upload errors CSV to Supabase Storage\n    const errorFilePath = `${jobId}/errors.csv`;\n    const { error } = await supabaseAdmin.storage\n      .from('csv-uploads')\n      .upload(errorFilePath, csvContent, {\n        contentType: 'text/csv',\n        upsert: true\n      });\n\n    if (error) {\n      console.error(`Failed to upload errors CSV: ${error.message}`);\n    } else {\n      console.log(`Uploaded errors CSV for job ${jobId}`);\n    }\n  } catch (error) {\n    console.error('Failed to generate errors CSV:', error);\n  }\n}\n","size_bytes":11907},"server/workers/queue-processor.ts":{"content":"import { queue } from '../lib/queue';\nimport { processIngestionJob } from './ingestion';\nimport type { QueueJob } from '../lib/queue';\n\nexport class QueueProcessor {\n  private running = false;\n\n  async start(): Promise<void> {\n    if (this.running) {\n      console.log('Queue processor already running');\n      return;\n    }\n\n    this.running = true;\n    console.log('Starting queue processor...');\n\n    await queue.start(this.processJob.bind(this));\n  }\n\n  async stop(): Promise<void> {\n    if (!this.running) return;\n\n    console.log('Stopping queue processor...');\n    this.running = false;\n    await queue.stop();\n  }\n\n  private async processJob(job: QueueJob): Promise<void> {\n    console.log(`Processing job ${job.id}: ${job.mode} for vendor ${job.vendorId}`);\n\n    try {\n      switch (job.mode) {\n        case 'products':\n        case 'customers':\n          await processIngestionJob(job);\n          break;\n        \n        case 'api_sync':\n          await this.processApiSync(job);\n          break;\n        \n        default:\n          throw new Error(`Unknown job mode: ${job.mode}`);\n      }\n    } catch (error) {\n      console.error(`Job ${job.id} failed:`, error);\n      throw error;\n    }\n  }\n\n  private async processApiSync(job: QueueJob): Promise<void> {\n    // API sync implementation would go here\n    // This would handle rate-limited paged fetching from external APIs\n    console.log(`API sync job ${job.id} - not yet implemented`);\n  }\n}\n\n// Global queue processor instance\nexport const queueProcessor = new QueueProcessor();\n\n// Auto-start in production\nif (process.env.NODE_ENV === 'production') {\n  queueProcessor.start().catch(console.error);\n}\n\n// Graceful shutdown\nprocess.on('SIGTERM', async () => {\n  console.log('Received SIGTERM, shutting down gracefully...');\n  await queueProcessor.stop();\n  process.exit(0);\n});\n\nprocess.on('SIGINT', async () => {\n  console.log('Received SIGINT, shutting down gracefully...');\n  await queueProcessor.stop();\n  process.exit(0);\n});\n","size_bytes":1997},"client/src/hooks/use-auth.ts":{"content":"import { useState, useEffect, useCallback } from 'react';\n\nexport interface AuthUser {\n  id: string;\n  email: string;\n  displayName: string;\n  vendorId: string;\n  role: 'superadmin' | 'vendor_admin' | 'vendor_operator' | 'vendor_viewer';\n  permissions: string[];\n}\n\nexport interface AuthState {\n  user: AuthUser | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  error: string | null;\n}\n\nexport function useAuth() {\n  const [state, setState] = useState<AuthState>({\n    user: null,\n    isLoading: true,\n    isAuthenticated: false,\n    error: null\n  });\n\n  // Mock authentication for demo - in production this would integrate with Appwrite\n  useEffect(() => {\n    // Simulate authentication check\n    const checkAuth = async () => {\n      try {\n        // In production, this would check for valid JWT token and validate with Appwrite\n        const mockUser: AuthUser = {\n          id: 'user-123',\n          email: 'admin@example.com',\n          displayName: 'Admin User',\n          vendorId: 'vendor-123',\n          role: 'vendor_admin',\n          permissions: ['read:products', 'write:products', 'read:customers', 'write:customers', 'read:health']\n        };\n\n        setState({\n          user: mockUser,\n          isLoading: false,\n          isAuthenticated: true,\n          error: null\n        });\n      } catch (error) {\n        setState({\n          user: null,\n          isLoading: false,\n          isAuthenticated: false,\n          error: (error as Error).message\n        });\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  const login = useCallback(async (email: string, password: string) => {\n    setState(prev => ({ ...prev, isLoading: true, error: null }));\n    \n    try {\n      // In production, this would authenticate with Appwrite\n      const mockUser: AuthUser = {\n        id: 'user-123',\n        email,\n        displayName: 'Admin User',\n        vendorId: 'vendor-123',\n        role: 'vendor_admin',\n        permissions: ['read:products', 'write:products', 'read:customers', 'write:customers', 'read:health']\n      };\n\n      setState({\n        user: mockUser,\n        isLoading: false,\n        isAuthenticated: true,\n        error: null\n      });\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: (error as Error).message\n      }));\n    }\n  }, []);\n\n  const logout = useCallback(async () => {\n    setState({\n      user: null,\n      isLoading: false,\n      isAuthenticated: false,\n      error: null\n    });\n  }, []);\n\n  const hasPermission = useCallback((permission: string): boolean => {\n    return state.user?.permissions.includes(permission) || state.user?.role === 'superadmin' || false;\n  }, [state.user]);\n\n  const hasRole = useCallback((...roles: string[]): boolean => {\n    return state.user ? roles.includes(state.user.role) || state.user.role === 'superadmin' : false;\n  }, [state.user]);\n\n  return {\n    ...state,\n    login,\n    logout,\n    hasPermission,\n    hasRole\n  };\n}\n","size_bytes":2964},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.ts":{"content":"import { useEffect, useRef, useState, useCallback } from 'react';\n\nexport interface WebSocketMessage {\n  type: string;\n  data: any;\n  timestamp: string;\n}\n\nexport interface WebSocketState {\n  isConnected: boolean;\n  lastMessage: WebSocketMessage | null;\n  error: string | null;\n}\n\nexport function useWebSocket(url?: string) {\n  const [state, setState] = useState<WebSocketState>({\n    isConnected: false,\n    lastMessage: null,\n    error: null\n  });\n\n  const ws = useRef<WebSocket | null>(null);\n  const reconnectTimer = useRef<NodeJS.Timeout | null>(null);\n  const messageListeners = useRef<Map<string, Set<(data: any) => void>>>(new Map());\n\n  const connect = useCallback(() => {\n    if (!url) return;\n\n    try {\n      // In production, this would connect to a real WebSocket endpoint\n      // For now, we'll simulate the connection state\n      setState(prev => ({\n        ...prev,\n        isConnected: true,\n        error: null\n      }));\n\n      // Simulate periodic updates\n      const interval = setInterval(() => {\n        const mockMessage: WebSocketMessage = {\n          type: 'metrics_update',\n          data: {\n            searchP95: Math.floor(Math.random() * 100) + 200,\n            matchesP95: Math.floor(Math.random() * 200) + 300,\n            activeJobs: Math.floor(Math.random() * 5),\n            timestamp: new Date().toISOString()\n          },\n          timestamp: new Date().toISOString()\n        };\n\n        setState(prev => ({\n          ...prev,\n          lastMessage: mockMessage\n        }));\n\n        // Notify listeners\n        const listeners = messageListeners.current.get(mockMessage.type);\n        if (listeners) {\n          listeners.forEach(callback => callback(mockMessage.data));\n        }\n      }, 30000); // Update every 30 seconds\n\n      return () => {\n        clearInterval(interval);\n      };\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        isConnected: false,\n        error: (error as Error).message\n      }));\n    }\n  }, [url]);\n\n  const disconnect = useCallback(() => {\n    if (ws.current) {\n      ws.current.close();\n      ws.current = null;\n    }\n\n    if (reconnectTimer.current) {\n      clearTimeout(reconnectTimer.current);\n      reconnectTimer.current = null;\n    }\n\n    setState(prev => ({\n      ...prev,\n      isConnected: false\n    }));\n  }, []);\n\n  const sendMessage = useCallback((message: any) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    }\n  }, []);\n\n  const subscribe = useCallback((messageType: string, callback: (data: any) => void) => {\n    if (!messageListeners.current.has(messageType)) {\n      messageListeners.current.set(messageType, new Set());\n    }\n    messageListeners.current.get(messageType)!.add(callback);\n\n    // Return unsubscribe function\n    return () => {\n      const listeners = messageListeners.current.get(messageType);\n      if (listeners) {\n        listeners.delete(callback);\n        if (listeners.size === 0) {\n          messageListeners.current.delete(messageType);\n        }\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (url) {\n      connect();\n    }\n\n    return () => {\n      disconnect();\n    };\n  }, [url, connect, disconnect]);\n\n  return {\n    ...state,\n    connect,\n    disconnect,\n    sendMessage,\n    subscribe\n  };\n}\n","size_bytes":3319},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport const api = {\n  // System metrics\n  async getMetrics() {\n    const response = await apiRequest('GET', '/api/v1/metrics');\n    return response.json();\n  },\n\n  // Vendors\n  async getVendors() {\n    const response = await apiRequest('GET', '/api/v1/vendors');\n    return response.json();\n  },\n\n  async createVendor(vendor: any) {\n    const response = await apiRequest('POST', '/api/v1/vendors', vendor);\n    return response.json();\n  },\n\n  // Products\n  async getProducts(params?: any) {\n    const query = params ? `?${new URLSearchParams(params)}` : '';\n    const response = await apiRequest('GET', `/api/v1/products${query}`);\n    return response.json();\n  },\n\n  async searchProducts(query: string, params?: any) {\n    const searchParams = new URLSearchParams({ q: query, ...params });\n    const response = await apiRequest('GET', `/api/v1/search/products?${searchParams}`);\n    return response.json();\n  },\n\n  async createProducts(products: any[]) {\n    const response = await apiRequest('POST', '/api/v1/products', products);\n    return response.json();\n  },\n\n  async getProduct(id: string) {\n    const response = await apiRequest('GET', `/api/v1/products/${id}`);\n    return response.json();\n  },\n\n  async updateProduct(id: string, updates: any) {\n    const response = await apiRequest('PATCH', `/api/v1/products/${id}`, updates);\n    return response.json();\n  },\n\n  async deleteProduct(id: string) {\n    const response = await apiRequest('DELETE', `/api/v1/products/${id}`);\n    return response.ok;\n  },\n\n  // Customers\n  async getCustomers(params?: any) {\n    const query = params ? `?${new URLSearchParams(params)}` : '';\n    const response = await apiRequest('GET', `/api/v1/customers${query}`);\n    return response.json();\n  },\n\n  async searchCustomers(query: string, params?: any) {\n    const searchParams = new URLSearchParams({ q: query, ...params });\n    const response = await apiRequest('GET', `/api/v1/customers?${searchParams}`);\n    return response.json();\n  },\n\n  async createCustomers(customers: any[]) {\n    const response = await apiRequest('POST', '/api/v1/customers', customers);\n    return response.json();\n  },\n\n  async getCustomer(id: string) {\n    const response = await apiRequest('GET', `/api/v1/customers/${id}`);\n    return response.json();\n  },\n\n  async updateCustomer(id: string, updates: any) {\n    const response = await apiRequest('PATCH', `/api/v1/customers/${id}`, updates);\n    return response.json();\n  },\n\n  async getCustomerHealth(id: string) {\n    const response = await apiRequest('GET', `/api/v1/customers/${id}/health`);\n    return response.json();\n  },\n\n  async updateCustomerHealth(id: string, healthData: any) {\n    const response = await apiRequest('PUT', `/api/v1/customers/${id}/health`, healthData);\n    return response.json();\n  },\n\n  // Ingestion Jobs\n  async getJobs(params?: any) {\n    const query = params ? `?${new URLSearchParams(params)}` : '';\n    const response = await apiRequest('GET', `/api/v1/jobs${query}`);\n    return response.json();\n  },\n\n  async getJob(id: string) {\n    const response = await apiRequest('GET', `/api/v1/jobs/${id}`);\n    return response.json();\n  },\n\n  async startCsvIngestion(mode: 'products' | 'customers', params?: any) {\n    const response = await apiRequest('POST', `/api/v1/ingest/csv?mode=${mode}`, params);\n    return response.json();\n  },\n\n  // Matching\n  async getMatches(customerId: string, k = 20) {\n    const response = await apiRequest('GET', `/api/v1/matches/${customerId}?k=${k}`);\n    return response.json();\n  },\n\n  // Audit Logs\n  async getAuditLogs(params?: any) {\n    const query = params ? `?${new URLSearchParams(params)}` : '';\n    const response = await apiRequest('GET', `/api/v1/audit${query}`);\n    return response.json();\n  },\n\n  // Webhooks\n  async createWebhookEndpoint(endpoint: any) {\n    const response = await apiRequest('POST', '/api/v1/webhooks/endpoints', endpoint);\n    return response.json();\n  },\n\n  async getWebhookEndpoints() {\n    const response = await apiRequest('GET', '/api/v1/webhooks/endpoints');\n    return response.json();\n  },\n\n  // Health check\n  async getHealth() {\n    const response = await apiRequest('GET', '/api/v1/health');\n    return response.json();\n  }\n};\n","size_bytes":4261},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/analytics.tsx":{"content":"import { Sidebar } from \"@/components/layout/sidebar\";\nimport { TopBar } from \"@/components/layout/top-bar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TrendingUp, Search, Zap, Database, Clock, Users } from \"lucide-react\";\n\nexport default function Analytics() {\n  const { data: metrics, isLoading } = useQuery({\n    queryKey: ['/api/v1/metrics'],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  return (\n    <div className=\"flex min-h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <TopBar \n          title=\"Analytics & Performance\" \n          subtitle=\"Monitor system performance and health-aware matching insights\"\n        />\n        \n        <div className=\"p-6 space-y-8\">\n          {/* API Performance Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-blue-100 rounded-lg\">\n                    <Search className=\"w-5 h-5 text-blue-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Search API P95</p>\n                    <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"text-search-p95\">\n                      {metrics?.searchP95 || '--'}ms\n                    </p>\n                    <p className=\"text-sm text-green-600\">Within SLO (≤300ms)</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-purple-100 rounded-lg\">\n                    <Zap className=\"w-5 h-5 text-purple-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Matches API P95</p>\n                    <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"text-matches-p95\">\n                      {metrics?.matchesP95 || '--'}ms\n                    </p>\n                    <p className=\"text-sm text-green-600\">Within SLO (≤500ms)</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-green-100 rounded-lg\">\n                    <TrendingUp className=\"w-5 h-5 text-green-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Availability</p>\n                    <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"text-availability\">\n                      {metrics?.availability || '--'}%\n                    </p>\n                    <p className=\"text-sm text-green-600\">Above target (99.9%)</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-orange-100 rounded-lg\">\n                    <Clock className=\"w-5 h-5 text-orange-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Daily Jobs</p>\n                    <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"text-daily-jobs\">\n                      {metrics?.dailyJobs || '--'}\n                    </p>\n                    <p className=\"text-sm text-gray-500\">{metrics?.activeJobs || 0} active</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Database Health */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Database className=\"w-5 h-5 mr-2\" />\n                Database Performance\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-gray-900\">Primary Database</h4>\n                  <div className=\"text-sm text-gray-600 space-y-1\">\n                    <div className=\"flex justify-between\">\n                      <span>CPU Usage:</span>\n                      <span className=\"font-medium\" data-testid=\"text-primary-cpu\">\n                        {metrics?.database?.primary?.cpu || '--'}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Memory:</span>\n                      <span className=\"font-medium\" data-testid=\"text-primary-memory\">\n                        {metrics?.database?.primary?.memory || '--'}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Connections:</span>\n                      <span className=\"font-medium\" data-testid=\"text-primary-connections\">\n                        {metrics?.database?.primary?.connections || '--'}/{metrics?.database?.primary?.maxConnections || '--'}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-gray-900\">Read Replicas</h4>\n                  <div className=\"text-sm text-gray-600 space-y-2\">\n                    {metrics?.database?.replicas?.map((replica: any, index: number) => (\n                      <div key={replica.id} className=\"flex justify-between\" data-testid={`text-replica-${index}`}>\n                        <span>Replica {index + 1}:</span>\n                        <span className={`font-medium ${replica.lag > 2 ? 'text-yellow-600' : 'text-green-600'}`}>\n                          {replica.lag}s lag\n                        </span>\n                      </div>\n                    )) || <div>No replica data available</div>}\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-gray-900\">Partitioning</h4>\n                  <div className=\"text-sm text-gray-600 space-y-1\">\n                    <div className=\"flex justify-between\">\n                      <span>Product Partitions:</span>\n                      <span className=\"font-medium\" data-testid=\"text-product-partitions\">\n                        {metrics?.database?.partitions?.products || '--'}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Customer Partitions:</span>\n                      <span className=\"font-medium\" data-testid=\"text-customer-partitions\">\n                        {metrics?.database?.partitions?.customers || '--'}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Active Vendors:</span>\n                      <span className=\"font-medium\" data-testid=\"text-vendor-count\">\n                        {metrics?.database?.partitions?.vendors || '--'}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Health-Aware Matching Insights */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Zap className=\"w-5 h-5 mr-2\" />\n                  Matching Performance\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Cache Hit Rate</span>\n                    <span className=\"font-semibold text-green-600\" data-testid=\"text-cache-hit-rate\">85.3%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Avg. Matching Time</span>\n                    <span className=\"font-semibold\" data-testid=\"text-avg-matching-time\">127ms</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Health Profiles Active</span>\n                    <span className=\"font-semibold text-blue-600\" data-testid=\"text-health-profiles-active\">12,847</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Dietary Restrictions</span>\n                    <span className=\"font-semibold\" data-testid=\"text-dietary-restrictions\">8,291</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Users className=\"w-5 h-5 mr-2\" />\n                  User Activity\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Daily Active Users</span>\n                    <span className=\"font-semibold\" data-testid=\"text-daily-active-users\">1,247</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Search Queries</span>\n                    <span className=\"font-semibold\" data-testid=\"text-search-queries\">15,832</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Match Requests</span>\n                    <span className=\"font-semibold\" data-testid=\"text-match-requests\">3,421</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Health Data Updates</span>\n                    <span className=\"font-semibold text-purple-600\" data-testid=\"text-health-updates\">89</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* System Status */}\n          <Card>\n            <CardHeader>\n              <CardTitle>System Status</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                    <span className=\"text-sm font-medium\">API Services</span>\n                    <span className=\"text-xs text-green-600\">Healthy</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                    <span className=\"text-sm font-medium\">Database</span>\n                    <span className=\"text-xs text-green-600\">Optimal</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-yellow-400 rounded-full\"></div>\n                    <span className=\"text-sm font-medium\">Read Replicas</span>\n                    <span className=\"text-xs text-yellow-600\">Minor Lag</span>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                    <span className=\"text-sm font-medium\">Queue Workers</span>\n                    <span className=\"text-xs text-green-600\">Processing</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                    <span className=\"text-sm font-medium\">Storage</span>\n                    <span className=\"text-xs text-green-600\">Available</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                    <span className=\"text-sm font-medium\">Webhooks</span>\n                    <span className=\"text-xs text-green-600\">Delivering</span>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"text-xs text-gray-500\">\n                    Last Updated: {metrics?.lastUpdated ? new Date(metrics.lastUpdated).toLocaleTimeString() : '--'}\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    Next Maintenance: Sunday 2:00 AM EST\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":13819},"client/src/pages/customers.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { TopBar } from \"@/components/layout/top-bar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search, Users, Filter, Download, Upload, Heart } from \"lucide-react\";\n\nexport default function Customers() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: customers, isLoading } = useQuery({\n    queryKey: ['/api/v1/customers', searchQuery],\n  });\n\n  return (\n    <div className=\"flex min-h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <TopBar \n          title=\"Customer Management\" \n          subtitle=\"Manage customer profiles and health data\"\n        />\n        \n        <div className=\"p-6 space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-gray-900\">Customers</h2>\n              <p className=\"text-sm text-gray-600\">\n                {customers?.data?.length || 0} customer profiles\n              </p>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" data-testid=\"button-export-customers\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export\n              </Button>\n              <Button data-testid=\"button-import-customers\">\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Import CSV\n              </Button>\n            </div>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Search Customers</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1 relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search customers by name or email...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-customers\"\n                  />\n                </div>\n                <Button variant=\"outline\" data-testid=\"button-advanced-filters\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  Filters\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(9)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardHeader>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div className=\"h-3 bg-gray-200 rounded\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {customers?.data?.map((customer: any) => (\n                <Card key={customer.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-customer-${customer.id}`}>\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg\" data-testid={`text-customer-name-${customer.id}`}>\n                          {customer.full_name}\n                        </CardTitle>\n                        <p className=\"text-sm text-gray-600 mt-1\" data-testid={`text-email-${customer.id}`}>\n                          {customer.email}\n                        </p>\n                      </div>\n                      {customer.health_profile && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          <Heart className=\"w-3 h-3 mr-1\" />\n                          Health Profile\n                        </Badge>\n                      )}\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                        {customer.age && (\n                          <div data-testid={`text-age-${customer.id}`}>\n                            <span className=\"text-gray-500\">Age:</span> {customer.age}\n                          </div>\n                        )}\n                        {customer.gender && (\n                          <div data-testid={`text-gender-${customer.id}`}>\n                            <span className=\"text-gray-500\">Gender:</span> {customer.gender}\n                          </div>\n                        )}\n                      </div>\n\n                      {customer.custom_tags && customer.custom_tags.length > 0 && (\n                        <div className=\"flex flex-wrap gap-1\">\n                          {customer.custom_tags.slice(0, 3).map((tag: string, index: number) => (\n                            <Badge key={index} variant=\"secondary\" className=\"text-xs\" data-testid={`badge-tag-${customer.id}-${index}`}>\n                              {tag}\n                            </Badge>\n                          ))}\n                          {customer.custom_tags.length > 3 && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              +{customer.custom_tags.length - 3}\n                            </Badge>\n                          )}\n                        </div>\n                      )}\n\n                      <div className=\"text-xs text-gray-500\" data-testid={`text-created-${customer.id}`}>\n                        Joined {new Date(customer.created_at).toLocaleDateString()}\n                      </div>\n\n                      <div className=\"flex gap-2 pt-2\">\n                        <Button size=\"sm\" variant=\"outline\" data-testid={`button-view-${customer.id}`}>\n                          View Profile\n                        </Button>\n                        <Button size=\"sm\" variant=\"outline\" data-testid={`button-health-${customer.id}`}>\n                          Health Data\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {!isLoading && (!customers?.data || customers.data.length === 0) && (\n            <div className=\"text-center py-12\">\n              <Users className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No customers found</h3>\n              <p className=\"text-gray-600 mb-4\">\n                {searchQuery ? \"Try adjusting your search criteria.\" : \"Start by importing your customer database.\"}\n              </p>\n              <Button data-testid=\"button-import-first-customers\">\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Import Customer Data\n              </Button>\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":7705},"client/src/pages/dashboard.tsx":{"content":"import { Sidebar } from \"@/components/layout/sidebar\";\nimport { TopBar } from \"@/components/layout/top-bar\";\nimport { MetricsGrid } from \"@/components/dashboard/metrics-grid\";\nimport { ActiveJobsCard } from \"@/components/dashboard/active-jobs-card\";\nimport { DatabaseHealthCard } from \"@/components/dashboard/database-health-card\";\nimport { AuditLogTable } from \"@/components/dashboard/audit-log-table\";\nimport { QuickActionsGrid } from \"@/components/dashboard/quick-actions-grid\";\n\nexport default function Dashboard() {\n  return (\n    <div className=\"flex min-h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <TopBar \n          title=\"Dashboard Overview\" \n          subtitle=\"Monitor your B2B nutrition platform performance\"\n        />\n        \n        <div className=\"p-6 space-y-8\">\n          <MetricsGrid />\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <ActiveJobsCard />\n            <DatabaseHealthCard />\n          </div>\n          \n          <AuditLogTable />\n          \n          <QuickActionsGrid />\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":1145},"client/src/pages/ingestion.tsx":{"content":"import { Sidebar } from \"@/components/layout/sidebar\";\nimport { TopBar } from \"@/components/layout/top-bar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Upload, Play, Pause, AlertCircle, CheckCircle, Clock, Download } from \"lucide-react\";\n\nexport default function Ingestion() {\n  const { data: jobs, isLoading } = useQuery({\n    queryKey: ['/api/v1/jobs'],\n    refetchInterval: 5000, // Poll every 5 seconds for real-time updates\n  });\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case 'failed':\n        return <AlertCircle className=\"w-4 h-4 text-red-600\" />;\n      case 'running':\n        return <Play className=\"w-4 h-4 text-blue-600\" />;\n      case 'queued':\n        return <Clock className=\"w-4 h-4 text-yellow-600\" />;\n      default:\n        return <Pause className=\"w-4 h-4 text-gray-600\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'failed':\n        return 'bg-red-100 text-red-800';\n      case 'running':\n        return 'bg-blue-100 text-blue-800';\n      case 'queued':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <TopBar \n          title=\"Data Ingestion\" \n          subtitle=\"Monitor CSV imports and API synchronization jobs\"\n        />\n        \n        <div className=\"p-6 space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-gray-900\">Ingestion Jobs</h2>\n              <p className=\"text-sm text-gray-600\">\n                {jobs?.data?.filter((job: any) => job.status === 'running').length || 0} active jobs\n              </p>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" data-testid=\"button-sync-api\">\n                <Play className=\"w-4 h-4 mr-2\" />\n                Start API Sync\n              </Button>\n              <Button data-testid=\"button-upload-csv\">\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Upload CSV\n              </Button>\n            </div>\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-blue-100 rounded-lg\">\n                    <Play className=\"w-5 h-5 text-blue-600\" />\n                  </div>\n                  <div className=\"ml-3\">\n                    <p className=\"text-sm font-medium text-gray-500\">Running</p>\n                    <p className=\"text-xl font-semibold text-gray-900\" data-testid=\"text-running-count\">\n                      {jobs?.data?.filter((job: any) => job.status === 'running').length || 0}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-yellow-100 rounded-lg\">\n                    <Clock className=\"w-5 h-5 text-yellow-600\" />\n                  </div>\n                  <div className=\"ml-3\">\n                    <p className=\"text-sm font-medium text-gray-500\">Queued</p>\n                    <p className=\"text-xl font-semibold text-gray-900\" data-testid=\"text-queued-count\">\n                      {jobs?.data?.filter((job: any) => job.status === 'queued').length || 0}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-green-100 rounded-lg\">\n                    <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  </div>\n                  <div className=\"ml-3\">\n                    <p className=\"text-sm font-medium text-gray-500\">Completed</p>\n                    <p className=\"text-xl font-semibold text-gray-900\" data-testid=\"text-completed-count\">\n                      {jobs?.data?.filter((job: any) => job.status === 'completed').length || 0}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-red-100 rounded-lg\">\n                    <AlertCircle className=\"w-5 h-5 text-red-600\" />\n                  </div>\n                  <div className=\"ml-3\">\n                    <p className=\"text-sm font-medium text-gray-500\">Failed</p>\n                    <p className=\"text-xl font-semibold text-gray-900\" data-testid=\"text-failed-count\">\n                      {jobs?.data?.filter((job: any) => job.status === 'failed').length || 0}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Jobs List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Jobs</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"animate-pulse flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-8 h-8 bg-gray-200 rounded-lg\"></div>\n                        <div>\n                          <div className=\"h-4 bg-gray-200 rounded w-32 mb-2\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded w-24\"></div>\n                        </div>\n                      </div>\n                      <div className=\"w-32 h-2 bg-gray-200 rounded\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : jobs?.data?.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No ingestion jobs</h3>\n                  <p className=\"text-gray-600 mb-4\">Start by uploading a CSV file or configuring an API sync.</p>\n                  <Button data-testid=\"button-start-first-job\">\n                    <Upload className=\"w-4 h-4 mr-2\" />\n                    Upload Your First CSV\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {jobs?.data?.map((job: any) => (\n                    <div key={job.id} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\" data-testid={`row-job-${job.id}`}>\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-10 h-10 bg-white rounded-lg flex items-center justify-center shadow-sm\">\n                          {getStatusIcon(job.status)}\n                        </div>\n                        <div>\n                          <div className=\"flex items-center space-x-2\">\n                            <h4 className=\"font-medium text-gray-900\" data-testid={`text-job-type-${job.id}`}>\n                              {job.mode === 'products' ? 'Products Import' : 'Customers Import'}\n                            </h4>\n                            <Badge className={`text-xs ${getStatusColor(job.status)}`} data-testid={`badge-status-${job.id}`}>\n                              {job.status}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-gray-500\" data-testid={`text-job-time-${job.id}`}>\n                            Started {new Date(job.created_at).toLocaleString()}\n                          </p>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center space-x-4\">\n                        {job.status === 'running' && (\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-32\">\n                              <Progress value={job.progress_pct} className=\"h-2\" data-testid={`progress-${job.id}`} />\n                            </div>\n                            <span className=\"text-sm font-medium text-gray-700\" data-testid={`text-progress-${job.id}`}>\n                              {job.progress_pct}%\n                            </span>\n                          </div>\n                        )}\n\n                        {job.totals && (\n                          <div className=\"text-right text-sm text-gray-600\" data-testid={`text-totals-${job.id}`}>\n                            <div>Processed: {job.totals.processed || 0}</div>\n                            <div>Succeeded: {job.totals.succeeded || 0}</div>\n                            {job.totals.failed > 0 && (\n                              <div className=\"text-red-600\">Failed: {job.totals.failed}</div>\n                            )}\n                          </div>\n                        )}\n\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" variant=\"outline\" data-testid={`button-view-${job.id}`}>\n                            View Details\n                          </Button>\n                          {job.error_url && (\n                            <Button size=\"sm\" variant=\"outline\" data-testid={`button-download-errors-${job.id}`}>\n                              <Download className=\"w-4 h-4 mr-1\" />\n                              Errors\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":10652},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/products.tsx":{"content":"import { useState } from \"react\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { TopBar } from \"@/components/layout/top-bar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search, Package, Filter, Download, Upload } from \"lucide-react\";\n\nexport default function Products() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filters, setFilters] = useState({\n    status: \"\",\n    brand: \"\",\n    category: \"\"\n  });\n\n  const { data: products, isLoading } = useQuery({\n    queryKey: ['/api/v1/products', searchQuery, filters],\n  });\n\n  return (\n    <div className=\"flex min-h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <TopBar \n          title=\"Product Catalog\" \n          subtitle=\"Manage product inventory and nutrition data\"\n        />\n        \n        <div className=\"p-6 space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-gray-900\">Products</h2>\n              <p className=\"text-sm text-gray-600\">\n                {products?.data?.length || 0} products in catalog\n              </p>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" data-testid=\"button-export-products\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export\n              </Button>\n              <Button data-testid=\"button-import-products\">\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Import CSV\n              </Button>\n            </div>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Search & Filter</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1 relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    placeholder=\"Search products by name, brand, or description...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-products\"\n                  />\n                </div>\n                <Button variant=\"outline\" data-testid=\"button-advanced-filters\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  Filters\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(9)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardHeader>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div className=\"h-3 bg-gray-200 rounded\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                      <div className=\"h-8 bg-gray-200 rounded\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {products?.data?.map((product: any) => (\n                <Card key={product.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-product-${product.id}`}>\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg line-clamp-2\" data-testid={`text-product-name-${product.id}`}>\n                          {product.name}\n                        </CardTitle>\n                        {product.brand && (\n                          <p className=\"text-sm text-gray-600 mt-1\" data-testid={`text-brand-${product.id}`}>\n                            {product.brand}\n                          </p>\n                        )}\n                      </div>\n                      <Badge \n                        variant={product.status === 'active' ? 'default' : 'secondary'}\n                        data-testid={`badge-status-${product.id}`}\n                      >\n                        {product.status}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {product.description && (\n                        <p className=\"text-sm text-gray-700 line-clamp-2\" data-testid={`text-description-${product.id}`}>\n                          {product.description}\n                        </p>\n                      )}\n                      \n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-lg font-semibold text-green-600\" data-testid={`text-price-${product.id}`}>\n                          ${product.price || '0.00'}\n                        </span>\n                        {product.barcode && (\n                          <span className=\"text-xs text-gray-500 font-mono\" data-testid={`text-barcode-${product.id}`}>\n                            {product.barcode}\n                          </span>\n                        )}\n                      </div>\n\n                      {product.dietary_tags && product.dietary_tags.length > 0 && (\n                        <div className=\"flex flex-wrap gap-1\">\n                          {product.dietary_tags.slice(0, 3).map((tag: string, index: number) => (\n                            <Badge key={index} variant=\"outline\" className=\"text-xs\" data-testid={`badge-tag-${product.id}-${index}`}>\n                              {tag}\n                            </Badge>\n                          ))}\n                          {product.dietary_tags.length > 3 && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              +{product.dietary_tags.length - 3}\n                            </Badge>\n                          )}\n                        </div>\n                      )}\n\n                      <div className=\"flex gap-2 pt-2\">\n                        <Button size=\"sm\" variant=\"outline\" data-testid={`button-view-${product.id}`}>\n                          View Details\n                        </Button>\n                        <Button size=\"sm\" variant=\"outline\" data-testid={`button-edit-${product.id}`}>\n                          Edit\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {!isLoading && (!products?.data || products.data.length === 0) && (\n            <div className=\"text-center py-12\">\n              <Package className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No products found</h3>\n              <p className=\"text-gray-600 mb-4\">\n                {searchQuery ? \"Try adjusting your search criteria.\" : \"Start by importing your first product catalog.\"}\n              </p>\n              <Button data-testid=\"button-import-first-products\">\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Import Product Catalog\n              </Button>\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":7964},"client/src/pages/vendors.tsx":{"content":"import { Sidebar } from \"@/components/layout/sidebar\";\nimport { TopBar } from \"@/components/layout/top-bar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { Plus, Building, Users, Package } from \"lucide-react\";\n\nexport default function Vendors() {\n  const { data: vendors, isLoading } = useQuery({\n    queryKey: ['/api/v1/vendors'],\n  });\n\n  return (\n    <div className=\"flex min-h-screen bg-gray-50\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto\">\n        <TopBar \n          title=\"Vendor Management\" \n          subtitle=\"Manage and monitor all vendor accounts\"\n        />\n        \n        <div className=\"p-6 space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h2 className=\"text-2xl font-semibold text-gray-900\">Vendors</h2>\n              <p className=\"text-sm text-gray-600\">\n                {vendors?.data?.length || 0} active vendor accounts\n              </p>\n            </div>\n            <Button data-testid=\"button-create-vendor\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Vendor\n            </Button>\n          </div>\n\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardHeader>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div className=\"h-3 bg-gray-200 rounded\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {vendors?.data?.map((vendor: any) => (\n                <Card key={vendor.id} className=\"hover:shadow-md transition-shadow\" data-testid={`card-vendor-${vendor.id}`}>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"flex items-center text-lg\">\n                        <Building className=\"w-5 h-5 mr-2 text-blue-600\" />\n                        {vendor.name}\n                      </CardTitle>\n                      <Badge \n                        variant={vendor.status === 'active' ? 'default' : 'secondary'}\n                        data-testid={`badge-status-${vendor.id}`}\n                      >\n                        {vendor.status}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center text-sm text-gray-600\">\n                        <Package className=\"w-4 h-4 mr-2\" />\n                        <span data-testid={`text-products-${vendor.id}`}>\n                          {Math.floor(Math.random() * 50000).toLocaleString()} products\n                        </span>\n                      </div>\n                      <div className=\"flex items-center text-sm text-gray-600\">\n                        <Users className=\"w-4 h-4 mr-2\" />\n                        <span data-testid={`text-customers-${vendor.id}`}>\n                          {Math.floor(Math.random() * 10000).toLocaleString()} customers\n                        </span>\n                      </div>\n                      <div className=\"text-xs text-gray-500\" data-testid={`text-created-${vendor.id}`}>\n                        Created {new Date(vendor.created_at).toLocaleDateString()}\n                      </div>\n                      <div className=\"flex gap-2 pt-2\">\n                        <Button size=\"sm\" variant=\"outline\" data-testid={`button-view-${vendor.id}`}>\n                          View Details\n                        </Button>\n                        <Button size=\"sm\" variant=\"outline\" data-testid={`button-configure-${vendor.id}`}>\n                          Configure\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {!isLoading && (!vendors?.data || vendors.data.length === 0) && (\n            <div className=\"text-center py-12\">\n              <Building className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No vendors yet</h3>\n              <p className=\"text-gray-600 mb-4\">Get started by adding your first vendor account.</p>\n              <Button data-testid=\"button-create-first-vendor\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Your First Vendor\n              </Button>\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":5296},"client/src/types/api.ts":{"content":"// API Response Types\nexport interface ApiResponse<T = any> {\n  data: T;\n  message?: string;\n  errors?: FieldError[];\n}\n\nexport interface PaginatedResponse<T = any> extends ApiResponse<T[]> {\n  pagination: {\n    cursor?: string;\n    limit: number;\n    total?: number;\n    hasMore?: boolean;\n  };\n  freshness?: 'fresh' | 'stale';\n}\n\nexport interface FieldError {\n  field: string;\n  code: string;\n  message: string;\n  value?: any;\n}\n\n// Entity Types\nexport interface Vendor {\n  id: string;\n  name: string;\n  status: 'active' | 'inactive' | 'suspended';\n  created_at: string;\n  updated_at: string;\n  settings_json: Record<string, any>;\n  catalog_version: number;\n}\n\nexport interface Product {\n  id: string;\n  vendor_id: string;\n  external_id: string;\n  name: string;\n  brand?: string;\n  description?: string;\n  category_id?: string;\n  price?: number;\n  currency: string;\n  status: 'active' | 'inactive';\n  created_at: string;\n  updated_at: string;\n  barcode?: string;\n  gtin_type?: 'UPC' | 'EAN' | 'ISBN';\n  ingredients?: string;\n  nutrition?: Record<string, any>;\n  serving_size?: string;\n  package_weight?: string;\n  dietary_tags?: string[];\n  allergens?: string[];\n  certifications?: string[];\n  regulatory_codes?: string[];\n  source_url?: string;\n  soft_deleted_at?: string;\n}\n\nexport interface Customer {\n  id: string;\n  vendor_id: string;\n  external_id: string;\n  full_name: string;\n  email: string;\n  dob?: string;\n  age?: number;\n  gender?: 'male' | 'female' | 'other' | 'unspecified';\n  location?: Record<string, any>;\n  created_at: string;\n  updated_at: string;\n  phone?: string;\n  custom_tags?: string[];\n}\n\nexport interface CustomerHealthProfile {\n  customer_id: string;\n  height_cm: number;\n  weight_kg: number;\n  age: number;\n  gender: 'male' | 'female' | 'other' | 'unspecified';\n  activity_level: 'sedentary' | 'light' | 'moderate' | 'very' | 'extra';\n  conditions: string[];\n  diet_goals: string[];\n  macro_targets: Record<string, any>;\n  avoid_allergens: string[];\n  bmi?: number;\n  bmr?: number;\n  tdee_cached?: number;\n  derived_limits?: Record<string, any>;\n  created_at: string;\n  updated_at: string;\n  updated_by?: string;\n}\n\nexport interface IngestionJob {\n  id: string;\n  vendor_id: string;\n  mode: 'products' | 'customers' | 'api_sync';\n  status: 'queued' | 'running' | 'failed' | 'completed' | 'canceled';\n  progress_pct: number;\n  totals?: {\n    processed?: number;\n    succeeded?: number;\n    failed?: number;\n    errors?: number;\n    warnings?: number;\n  };\n  error_url?: string;\n  started_at?: string;\n  finished_at?: string;\n  attempt: number;\n  params?: Record<string, any>;\n  created_at: string;\n}\n\nexport interface AuditLogEntry {\n  id: string;\n  actor_user_id?: string;\n  actor_role?: string;\n  vendor_id?: string;\n  action: string;\n  entity: string;\n  entity_id?: string;\n  before?: Record<string, any>;\n  after?: Record<string, any>;\n  ip?: string;\n  ua?: string;\n  justification?: string;\n  timestamp: string;\n}\n\nexport interface WebhookEndpoint {\n  id: string;\n  vendor_id: string;\n  url: string;\n  secret_ref?: string;\n  enabled: boolean;\n  description?: string;\n  retries_max: number;\n  tolerance_sec: number;\n  created_at: string;\n  updated_at: string;\n}\n\n// System Metrics Types\nexport interface SystemMetrics {\n  searchP95: number;\n  matchesP95: number;\n  dailyJobs: number;\n  availability: number;\n  activeJobs: number;\n  lastUpdated: string;\n  database?: DatabaseHealth;\n}\n\nexport interface DatabaseHealth {\n  primary: {\n    cpu: number;\n    memory: number;\n    connections: number;\n    maxConnections: number;\n  };\n  replicas: Array<{\n    id: string;\n    status: string;\n    lag: number;\n  }>;\n  partitions: {\n    products: number;\n    customers: number;\n    vendors: number;\n  };\n}\n\n// Request Types\nexport interface CreateVendorRequest {\n  name: string;\n  status?: 'active' | 'inactive' | 'suspended';\n  settings_json?: Record<string, any>;\n}\n\nexport interface CreateProductRequest {\n  external_id: string;\n  name: string;\n  brand?: string;\n  description?: string;\n  category_id?: string;\n  price?: number;\n  currency?: string;\n  barcode?: string;\n  gtin_type?: 'UPC' | 'EAN' | 'ISBN';\n  ingredients?: string;\n  nutrition?: Record<string, any>;\n  serving_size?: string;\n  package_weight?: string;\n  dietary_tags?: string[];\n  allergens?: string[];\n  certifications?: string[];\n  regulatory_codes?: string[];\n  source_url?: string;\n}\n\nexport interface CreateCustomerRequest {\n  external_id: string;\n  full_name: string;\n  email: string;\n  dob?: string;\n  age?: number;\n  gender?: 'male' | 'female' | 'other' | 'unspecified';\n  location?: Record<string, any>;\n  phone?: string;\n  custom_tags?: string[];\n}\n\nexport interface UpdateCustomerHealthRequest {\n  height_cm: number;\n  weight_kg: number;\n  age: number;\n  gender: 'male' | 'female' | 'other' | 'unspecified';\n  activity_level: 'sedentary' | 'light' | 'moderate' | 'very' | 'extra';\n  conditions: string[];\n  diet_goals: string[];\n  macro_targets: Record<string, any>;\n  avoid_allergens: string[];\n}\n\nexport interface StartIngestionRequest {\n  mode: 'products' | 'customers';\n  params?: Record<string, any>;\n}\n\nexport interface CreateWebhookEndpointRequest {\n  url: string;\n  description?: string;\n  retries_max?: number;\n  tolerance_sec?: number;\n}\n\n// Search and Filter Types\nexport interface SearchFilters {\n  q?: string;\n  brand?: string;\n  category_id?: string;\n  tags?: string[];\n  allergens?: string[];\n  updated_after?: string;\n  sort?: 'relevance' | '-updated_at' | 'name';\n}\n\nexport interface MatchingParams {\n  customer_id: string;\n  k?: number;\n  filters?: SearchFilters;\n}\n\nexport interface SearchResponse<T> extends ApiResponse<T[]> {\n  query?: string;\n  freshness?: 'fresh' | 'stale';\n}\n\nexport interface MatchingResponse extends ApiResponse<Product[]> {\n  customer_id: string;\n  k: number;\n  cached: boolean;\n  freshness?: 'fresh' | 'stale';\n}\n","size_bytes":5861},"client/src/components/dashboard/active-jobs-card.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Building, AlertCircle } from \"lucide-react\";\n\nexport function ActiveJobsCard() {\n  const { data: jobs, isLoading } = useQuery({\n    queryKey: ['/api/v1/jobs'],\n    refetchInterval: 5000, // Poll every 5 seconds\n  });\n\n  const activeJobs = jobs?.data?.filter((job: any) => \n    ['running', 'failed'].includes(job.status)\n  ) || [];\n\n  const getJobIcon = (status: string) => {\n    if (status === 'failed') {\n      return <AlertCircle className=\"text-red-600 w-4 h-4\" />;\n    }\n    return <Building className=\"text-blue-600 w-4 h-4\" />;\n  };\n\n  const getJobBgColor = (status: string) => {\n    if (status === 'failed') {\n      return \"bg-red-50 border-red-200\";\n    }\n    return \"bg-gray-50\";\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Active Ingestion Jobs</CardTitle>\n          <Badge \n            className=\"bg-orange-100 text-orange-800\"\n            data-testid=\"badge-active-jobs-count\"\n          >\n            {activeJobs.length} Running\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"animate-pulse flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-gray-200 rounded-lg\"></div>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 bg-gray-200 rounded w-32\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-24\"></div>\n                  </div>\n                </div>\n                <div className=\"w-32 h-2 bg-gray-200 rounded\"></div>\n              </div>\n            ))}\n          </div>\n        ) : activeJobs.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Building className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n            <p className=\"text-sm text-gray-500\">No active jobs</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {activeJobs.slice(0, 3).map((job: any) => (\n              <div \n                key={job.id} \n                className={`flex items-center justify-between p-4 rounded-lg ${getJobBgColor(job.status)}`}\n                data-testid={`card-active-job-${job.id}`}\n              >\n                <div className=\"flex items-center\">\n                  <div className=\"w-10 h-10 bg-white rounded-lg flex items-center justify-center shadow-sm\">\n                    {getJobIcon(job.status)}\n                  </div>\n                  <div className=\"ml-3\">\n                    <p className=\"text-sm font-medium text-gray-900\" data-testid={`text-job-name-${job.id}`}>\n                      {job.mode === 'products' ? 'Products CSV' : 'Customers CSV'}\n                    </p>\n                    <p className=\"text-sm text-gray-500\" data-testid={`text-job-details-${job.id}`}>\n                      {job.status === 'failed' \n                        ? `Failed • ${job.error_url || 'Processing error'}`\n                        : `Started ${new Date(job.created_at).toLocaleTimeString()}`\n                      }\n                    </p>\n                  </div>\n                </div>\n                \n                {job.status === 'running' && (\n                  <div className=\"flex items-center\">\n                    <div className=\"w-32 bg-gray-200 rounded-full h-2 mr-3\">\n                      <div \n                        className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\" \n                        style={{ width: `${job.progress_pct || 0}%` }}\n                        data-testid={`progress-${job.id}`}\n                      />\n                    </div>\n                    <span className=\"text-sm font-medium text-gray-900\" data-testid={`text-progress-${job.id}`}>\n                      {job.progress_pct || 0}%\n                    </span>\n                  </div>\n                )}\n                \n                {job.status === 'failed' && (\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\" \n                    className=\"text-red-600 hover:text-red-800\"\n                    data-testid={`button-view-errors-${job.id}`}\n                  >\n                    View Errors\n                  </Button>\n                )}\n              </div>\n            ))}\n            \n            <div className=\"text-center\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                data-testid=\"button-view-all-jobs\"\n              >\n                View All Jobs\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5088},"client/src/components/dashboard/audit-log-table.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Download, Shield, User, Bot } from \"lucide-react\";\n\nexport function AuditLogTable() {\n  const { data: auditLogs, isLoading } = useQuery({\n    queryKey: ['/api/v1/audit'],\n    refetchInterval: 60000, // Refresh every minute\n  });\n\n  const getActorIcon = (actorRole: string) => {\n    if (actorRole === 'superadmin') {\n      return <Shield className=\"text-red-600 w-3 h-3\" />;\n    }\n    if (actorRole === 'automated') {\n      return <Bot className=\"text-gray-600 w-3 h-3\" />;\n    }\n    return <User className=\"text-gray-600 w-3 h-3\" />;\n  };\n\n  const getActionBadgeColor = (action: string) => {\n    if (action.includes('break_glass')) {\n      return \"bg-red-100 text-red-800\";\n    }\n    if (action.includes('health')) {\n      return \"bg-blue-100 text-blue-800\";\n    }\n    if (action.includes('webhook')) {\n      return \"bg-purple-100 text-purple-800\";\n    }\n    if (action.includes('create') || action.includes('start')) {\n      return \"bg-green-100 text-green-800\";\n    }\n    return \"bg-gray-100 text-gray-800\";\n  };\n\n  const getStatusBadgeColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'success':\n        return \"bg-green-100 text-green-800\";\n      case 'logged':\n        return \"bg-yellow-100 text-yellow-800\";\n      case 'delivered':\n      case 'processing':\n        return \"bg-green-100 text-green-800\";\n      case 'failed':\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-blue-100 text-blue-800\";\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Recent Activity & Audit Log</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Badge className=\"bg-red-100 text-red-800\" data-testid=\"badge-hipaa-monitored\">\n              HIPAA Monitored\n            </Badge>\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              data-testid=\"button-export-audit-log\"\n            >\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export Log\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Timestamp\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Actor\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Action\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Entity\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Vendor\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Status\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {isLoading ? (\n                [...Array(4)].map((_, i) => (\n                  <tr key={i} className=\"animate-pulse\">\n                    <td className=\"px-6 py-4\"><div className=\"h-4 bg-gray-200 rounded w-32\"></div></td>\n                    <td className=\"px-6 py-4\"><div className=\"h-4 bg-gray-200 rounded w-24\"></div></td>\n                    <td className=\"px-6 py-4\"><div className=\"h-6 bg-gray-200 rounded w-20\"></div></td>\n                    <td className=\"px-6 py-4\"><div className=\"h-4 bg-gray-200 rounded w-28\"></div></td>\n                    <td className=\"px-6 py-4\"><div className=\"h-4 bg-gray-200 rounded w-20\"></div></td>\n                    <td className=\"px-6 py-4\"><div className=\"h-6 bg-gray-200 rounded w-16\"></div></td>\n                  </tr>\n                ))\n              ) : auditLogs?.data?.length === 0 ? (\n                <tr>\n                  <td colSpan={6} className=\"px-6 py-8 text-center text-gray-500\">\n                    No audit entries found\n                  </td>\n                </tr>\n              ) : (\n                auditLogs?.data?.slice(0, 4).map((log: any, index: number) => (\n                  <tr key={log.id} className=\"hover:bg-gray-50\" data-testid={`row-audit-${index}`}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\" data-testid={`text-timestamp-${index}`}>\n                      {new Date(log.timestamp).toLocaleString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-6 h-6 bg-gray-300 rounded-full flex items-center justify-center\">\n                          {getActorIcon(log.actor_role)}\n                        </div>\n                        <div className=\"ml-2\">\n                          <div className=\"text-sm font-medium text-gray-900\" data-testid={`text-actor-${index}`}>\n                            {log.actor_user_id || 'system'}\n                          </div>\n                          <div className=\"text-sm text-gray-500\" data-testid={`text-role-${index}`}>\n                            {log.actor_role}\n                          </div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Badge \n                        className={`text-xs ${getActionBadgeColor(log.action)}`}\n                        data-testid={`badge-action-${index}`}\n                      >\n                        {log.action}\n                      </Badge>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\" data-testid={`text-entity-${index}`}>\n                      {log.entity}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\" data-testid={`text-vendor-${index}`}>\n                      {log.vendor_id ? 'Vendor Entity' : 'System'}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Badge \n                        className={`text-xs ${getStatusBadgeColor('Success')}`}\n                        data-testid={`badge-status-${index}`}\n                      >\n                        Success\n                      </Badge>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n        \n        <div className=\"px-6 py-4 border-t border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <p className=\"text-sm text-gray-700\">\n              Showing <span className=\"font-medium\" data-testid=\"text-page-start\">1</span> to{\" \"}\n              <span className=\"font-medium\" data-testid=\"text-page-end\">4</span> of{\" \"}\n              <span className=\"font-medium\" data-testid=\"text-total-entries\">\n                {auditLogs?.data?.length || 0}\n              </span> audit entries\n            </p>\n            <div className=\"flex items-center space-x-2\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                disabled\n                data-testid=\"button-previous-page\"\n              >\n                Previous\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                data-testid=\"button-next-page\"\n              >\n                Next\n              </Button>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8249},"client/src/components/dashboard/database-health-card.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { AlertCircle, CheckCircle, Clock } from \"lucide-react\";\n\nexport function DatabaseHealthCard() {\n  const { data: metrics, isLoading } = useQuery({\n    queryKey: ['/api/v1/metrics'],\n    refetchInterval: 30000,\n  });\n\n  const database = metrics?.database;\n\n  const getStatusIcon = (status: string, lag?: number) => {\n    if (status === 'Healthy' && (!lag || lag < 2)) {\n      return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n    }\n    if (lag && lag > 2) {\n      return <Clock className=\"w-4 h-4 text-yellow-500\" />;\n    }\n    return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\n  };\n\n  const getStatusColor = (status: string, lag?: number) => {\n    if (status === 'Healthy' && (!lag || lag < 2)) {\n      return \"text-green-600\";\n    }\n    if (lag && lag > 2) {\n      return \"text-yellow-600\";\n    }\n    return \"text-red-600\";\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Database Health</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {isLoading ? (\n          <div className=\"space-y-6\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-4 bg-gray-200 rounded w-1/3 mb-2\"></div>\n                <div className=\"space-y-1\">\n                  <div className=\"h-3 bg-gray-200 rounded\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {/* Primary Database */}\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium text-gray-700\">Primary Database</span>\n                <div className=\"flex items-center\">\n                  {getStatusIcon('Healthy')}\n                  <span className=\"text-sm text-green-600 ml-2\" data-testid=\"text-primary-status\">\n                    Healthy\n                  </span>\n                </div>\n              </div>\n              <div className=\"text-sm text-gray-500 space-y-1\">\n                <p>\n                  CPU: <span data-testid=\"text-primary-cpu\">{database?.primary?.cpu || 23}%</span> • Memory: <span data-testid=\"text-primary-memory\">{database?.primary?.memory || 67}%</span>\n                </p>\n                <p data-testid=\"text-primary-connections\">\n                  Active connections: {database?.primary?.connections || 142}/{database?.primary?.maxConnections || 200}\n                </p>\n              </div>\n            </div>\n            \n            {/* Read Replicas */}\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium text-gray-700\">Read Replicas</span>\n                <div className=\"flex items-center\">\n                  {getStatusIcon('Healthy', 1.2)}\n                  <span className=\"text-sm text-yellow-600 ml-2\" data-testid=\"text-replicas-status\">\n                    Lag: 1.2s\n                  </span>\n                </div>\n              </div>\n              <div className=\"text-sm text-gray-500 space-y-1\">\n                {database?.replicas?.map((replica: any, index: number) => (\n                  <p key={replica.id} data-testid={`text-replica-${index}`}>\n                    Replica {index + 1}: {replica.status} • Lag: {replica.lag}s\n                  </p>\n                )) || (\n                  <>\n                    <p data-testid=\"text-replica-1\">Replica 1: Healthy • Lag: 0.8s</p>\n                    <p data-testid=\"text-replica-2\">Replica 2: Healthy • Lag: 1.2s</p>\n                  </>\n                )}\n              </div>\n            </div>\n            \n            {/* Partitioning Status */}\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-sm font-medium text-gray-700\">Partitioning Status</span>\n                <div className=\"flex items-center\">\n                  {getStatusIcon('Optimal')}\n                  <span className=\"text-sm text-green-600 ml-2\" data-testid=\"text-partitions-status\">\n                    Optimal\n                  </span>\n                </div>\n              </div>\n              <div className=\"text-sm text-gray-500 space-y-1\">\n                <p>\n                  Products: <span data-testid=\"text-product-partitions\">{database?.partitions?.products || 752} partitions</span> across <span data-testid=\"text-product-vendors\">{database?.partitions?.vendors || 47} vendors</span>\n                </p>\n                <p>\n                  Customers: <span data-testid=\"text-customer-partitions\">{database?.partitions?.customers || 1504} partitions</span> across <span data-testid=\"text-customer-vendors\">{database?.partitions?.vendors || 47} vendors</span>\n                </p>\n              </div>\n            </div>\n            \n            {/* Maintenance Window */}\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <div className=\"flex\">\n                <AlertCircle className=\"w-4 h-4 text-blue-600 mr-2 mt-0.5\" />\n                <div>\n                  <p className=\"text-sm font-medium text-blue-900\">Maintenance Window</p>\n                  <p className=\"text-sm text-blue-700\" data-testid=\"text-next-maintenance\">\n                    Next scheduled: Sunday 2:00 AM EST\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5685},"client/src/components/dashboard/metrics-grid.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TrendingUp, Zap, Upload, Activity } from \"lucide-react\";\n\nexport function MetricsGrid() {\n  const { data: metrics, isLoading } = useQuery({\n    queryKey: ['/api/v1/metrics'],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const metricCards = [\n    {\n      title: \"Search API P95\",\n      value: metrics?.searchP95 ? `${metrics.searchP95}ms` : \"245ms\",\n      change: \"↓ 12% from last week\",\n      changeColor: \"text-green-600\",\n      icon: Activity,\n      iconBg: \"bg-blue-100\",\n      iconColor: \"text-blue-600\",\n      testId: \"search-p95\"\n    },\n    {\n      title: \"Matches API P95\", \n      value: metrics?.matchesP95 ? `${metrics.matchesP95}ms` : \"387ms\",\n      change: \"Within SLO (<500ms)\",\n      changeColor: \"text-green-600\",\n      icon: Zap,\n      iconBg: \"bg-purple-100\",\n      iconColor: \"text-purple-600\",\n      testId: \"matches-p95\"\n    },\n    {\n      title: \"Ingestion Jobs\",\n      value: metrics?.dailyJobs ? metrics.dailyJobs.toString() : \"47\",\n      change: `Today (${metrics?.activeJobs || 3} running)`,\n      changeColor: \"text-gray-500\",\n      icon: Upload,\n      iconBg: \"bg-orange-100\", \n      iconColor: \"text-orange-600\",\n      testId: \"daily-jobs\"\n    },\n    {\n      title: \"System Availability\",\n      value: metrics?.availability ? `${metrics.availability}%` : \"99.97%\",\n      change: \"Above target (99.9%)\",\n      changeColor: \"text-green-600\",\n      icon: TrendingUp,\n      iconBg: \"bg-green-100\",\n      iconColor: \"text-green-600\", \n      testId: \"availability\"\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-10 h-10 bg-gray-200 rounded-lg\"></div>\n                <div className=\"ml-4 space-y-2 flex-1\">\n                  <div className=\"h-3 bg-gray-200 rounded w-3/4\"></div>\n                  <div className=\"h-6 bg-gray-200 rounded w-1/2\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {metricCards.map((metric) => (\n        <Card key={metric.testId} className=\"hover:shadow-md transition-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className={`p-2 ${metric.iconBg} rounded-lg`}>\n                <metric.icon className={`w-5 h-5 ${metric.iconColor}`} />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">\n                  {metric.title}\n                </p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid={`text-${metric.testId}`}>\n                  {metric.value}\n                </p>\n                <p className={`text-sm ${metric.changeColor}`}>\n                  {metric.change}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3398},"client/src/components/dashboard/quick-actions-grid.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Upload, FolderSync, Heart } from \"lucide-react\";\n\nexport function QuickActionsGrid() {\n  const actions = [\n    {\n      title: \"Start CSV Import\",\n      description: \"Upload and process product or customer data\",\n      icon: Upload,\n      iconBg: \"bg-blue-100\",\n      iconColor: \"text-blue-600\",\n      buttonText: \"Upload CSV File\",\n      buttonColor: \"bg-blue-600 hover:bg-blue-700\",\n      testId: \"start-csv-import\"\n    },\n    {\n      title: \"API FolderSync\",\n      description: \"FolderSync data from external vendor APIs\",\n      icon: FolderSync,\n      iconBg: \"bg-purple-100\", \n      iconColor: \"text-purple-600\",\n      buttonText: \"Configure FolderSync\",\n      buttonColor: \"bg-purple-600 hover:bg-purple-700\",\n      testId: \"configure-api-sync\"\n    },\n    {\n      title: \"Health Analytics\",\n      description: \"Review matching performance and health insights\",\n      icon: Heart,\n      iconBg: \"bg-green-100\",\n      iconColor: \"text-green-600\", \n      buttonText: \"View Analytics\",\n      buttonColor: \"bg-green-600 hover:bg-green-700\",\n      testId: \"view-health-analytics\"\n    }\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      {actions.map((action) => (\n        <Card key={action.testId} className=\"hover:shadow-md transition-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center mb-4\">\n              <div className={`p-3 ${action.iconBg} rounded-lg`}>\n                <action.icon className={`w-6 h-6 ${action.iconColor}`} />\n              </div>\n              <div className=\"ml-4\">\n                <h4 className=\"text-lg font-medium text-gray-900\" data-testid={`text-${action.testId}-title`}>\n                  {action.title}\n                </h4>\n                <p className=\"text-sm text-gray-500\" data-testid={`text-${action.testId}-description`}>\n                  {action.description}\n                </p>\n              </div>\n            </div>\n            <Button \n              className={`w-full text-white ${action.buttonColor} transition-colors`}\n              data-testid={`button-${action.testId}`}\n            >\n              {action.buttonText}\n            </Button>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2368},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  LayoutDashboard, \n  Building, \n  Package, \n  Users, \n  Upload, \n  Webhook, \n  Search, \n  Zap, \n  Shield, \n  Settings, \n  Database,\n  PanelRightDashed\n} from \"lucide-react\";\n\nconst navigation = [\n  {\n    name: \"Dashboard\",\n    href: \"/\",\n    icon: LayoutDashboard,\n    current: true\n  }\n];\n\nconst mainNavigation = [\n  {\n    name: \"Vendors\",\n    href: \"/vendors\",\n    icon: Building,\n    badge: \"47\"\n  },\n  {\n    name: \"Products\", \n    href: \"/products\",\n    icon: Package,\n    badge: \"2.3M\"\n  },\n  {\n    name: \"Customers\",\n    href: \"/customers\", \n    icon: Users,\n    badge: \"890K\"\n  }\n];\n\nconst pipelineNavigation = [\n  {\n    name: \"Ingestion Jobs\",\n    href: \"/ingestion\",\n    icon: Upload,\n    badge: \"3\",\n    badgeColor: \"bg-orange-100 text-orange-600\"\n  },\n  {\n    name: \"API Connectors\",\n    href: \"/connectors\",\n    icon: Webhook\n  },\n  {\n    name: \"Webhooks\",\n    href: \"/webhooks\",\n    icon: Webhook\n  }\n];\n\nconst analyticsNavigation = [\n  {\n    name: \"Search Performance\", \n    href: \"/analytics\",\n    icon: Search\n  },\n  {\n    name: \"Matching Engine\",\n    href: \"/matching\",\n    icon: Zap\n  },\n  {\n    name: \"Audit Logs\",\n    href: \"/audit\",\n    icon: Shield,\n    badge: \"HIPAA\",\n    badgeColor: \"bg-red-100 text-red-600\"\n  }\n];\n\nconst systemNavigation = [\n  {\n    name: \"RBAC Management\",\n    href: \"/rbac\",\n    icon: PanelRightDashed\n  },\n  {\n    name: \"Database Health\",\n    href: \"/database\",\n    icon: Database\n  },\n  {\n    name: \"Configuration\",\n    href: \"/settings\",\n    icon: Settings\n  }\n];\n\nexport function Sidebar() {\n  const [location] = useLocation();\n\n  const NavSection = ({ \n    title, \n    items, \n    className = \"\" \n  }: { \n    title?: string; \n    items: typeof navigation; \n    className?: string;\n  }) => (\n    <div className={className}>\n      {title && (\n        <h3 className=\"px-3 text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2\">\n          {title}\n        </h3>\n      )}\n      <div className=\"space-y-1\">\n        {items.map((item) => {\n          const isActive = location === item.href;\n          return (\n            <Link\n              key={item.name}\n              href={item.href}\n              className={cn(\n                \"group flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors\",\n                isActive\n                  ? \"bg-blue-50 text-blue-700\"\n                  : \"text-gray-600 hover:bg-gray-50 hover:text-gray-900\"\n              )}\n              data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <item.icon \n                className={cn(\n                  \"mr-3 h-5 w-5 flex-shrink-0\",\n                  isActive ? \"text-blue-500\" : \"text-gray-400\"\n                )} \n              />\n              {item.name}\n              {item.badge && (\n                <span \n                  className={cn(\n                    \"ml-auto text-xs px-2 py-1 rounded-full\",\n                    item.badgeColor || \"bg-gray-200 text-gray-600\"\n                  )}\n                  data-testid={`badge-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  {item.badge}\n                </span>\n              )}\n            </Link>\n          );\n        })}\n      </div>\n    </div>\n  );\n\n  return (\n    <aside className=\"w-64 bg-white shadow-md flex-shrink-0\">\n      {/* Logo */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center\">\n          <div className=\"w-8 h-8 bg-blue-700 rounded-lg flex items-center justify-center\">\n            <Zap className=\"text-white text-sm w-4 h-4\" />\n          </div>\n          <div className=\"ml-3\">\n            <h1 className=\"text-lg font-medium text-gray-900\" data-testid=\"text-app-name\">\n              Odyssey B2B\n            </h1>\n            <p className=\"text-sm text-gray-500\" data-testid=\"text-app-subtitle\">\n              Nutrition Platform\n            </p>\n          </div>\n        </div>\n      </div>\n      \n      {/* Navigation */}\n      <nav className=\"mt-6 px-3 space-y-8\">\n        <NavSection items={navigation} />\n        <NavSection items={mainNavigation} />\n        <NavSection title=\"Data Pipeline\" items={pipelineNavigation} />\n        <NavSection title=\"Analytics\" items={analyticsNavigation} />\n        <NavSection title=\"System\" items={systemNavigation} />\n      </nav>\n    </aside>\n  );\n}\n","size_bytes":4445},"client/src/components/layout/top-bar.tsx":{"content":"import { Clock, CheckCircle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface TopBarProps {\n  title: string;\n  subtitle: string;\n}\n\nexport function TopBar({ title, subtitle }: TopBarProps) {\n  const { data: metrics } = useQuery({\n    queryKey: ['/api/v1/metrics'],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200\">\n      <div className=\"flex items-center justify-between h-16 px-6\">\n        <div>\n          <h2 className=\"text-xl font-semibold text-gray-900\" data-testid=\"text-page-title\">\n            {title}\n          </h2>\n          <p className=\"text-sm text-gray-500\" data-testid=\"text-page-subtitle\">\n            {subtitle}\n          </p>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n            <Clock className=\"w-4 h-4\" />\n            <span>\n              Last updated: \n              <span className=\"ml-1\" data-testid=\"text-last-updated\">\n                {metrics?.lastUpdated \n                  ? new Date(metrics.lastUpdated).toLocaleTimeString()\n                  : \"2 minutes ago\"\n                }\n              </span>\n            </span>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n            <span className=\"text-sm text-gray-700\" data-testid=\"text-system-status\">\n              System Healthy\n            </span>\n          </div>\n          \n          <div className=\"flex items-center\">\n            <div className=\"w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center\">\n              <CheckCircle className=\"text-gray-600 w-4 h-4\" />\n            </div>\n            <div className=\"ml-3\">\n              <p className=\"text-sm font-medium text-gray-700\" data-testid=\"text-user-name\">\n                Admin User\n              </p>\n              <p className=\"text-xs text-gray-500\" data-testid=\"text-user-role\">\n                superadmin\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2222},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}